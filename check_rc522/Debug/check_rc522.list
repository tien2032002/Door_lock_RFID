
check_rc522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080049d0  080049d0  000149d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a20  08004a20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a20  08004a20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a20  08004a20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000070  08004a98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08004a98  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3e8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7f  00000000  00000000  0002b481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cfe  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec9b  00000000  00000000  00047a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae28  00000000  00000000  000566c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e14f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000e1544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080049b4 	.word	0x080049b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080049b4 	.word	0x080049b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <blink>:
#include "software_timer.h"
#include "main.h"

int led_status=0;

void blink(int duration) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	switch (led_status) {
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <blink+0x88>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d022      	beq.n	8000abe <blink+0x56>
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	dc30      	bgt.n	8000ade <blink+0x76>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <blink+0x1e>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d00c      	beq.n	8000a9e <blink+0x36>
				setTimer8(duration);
				led_status=1;
			}
			break;
		default:
			break;
 8000a84:	e02b      	b.n	8000ade <blink+0x76>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2101      	movs	r1, #1
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <blink+0x8c>)
 8000a8c:	f001 fdb5 	bl	80025fa <HAL_GPIO_WritePin>
			setTimer8(duration);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f001 f8ef 	bl	8001c74 <setTimer8>
			led_status=1;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <blink+0x88>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
			break;
 8000a9c:	e024      	b.n	8000ae8 <blink+0x80>
			if (timer8_flag==1) {
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <blink+0x90>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d11d      	bne.n	8000ae2 <blink+0x7a>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4812      	ldr	r0, [pc, #72]	; (8000af4 <blink+0x8c>)
 8000aac:	f001 fda5 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer8(duration);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f001 f8df 	bl	8001c74 <setTimer8>
				led_status=2;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <blink+0x88>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	601a      	str	r2, [r3, #0]
			break;
 8000abc:	e011      	b.n	8000ae2 <blink+0x7a>
			if (timer8_flag==1) {
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <blink+0x90>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d10f      	bne.n	8000ae6 <blink+0x7e>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <blink+0x8c>)
 8000acc:	f001 fd95 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer8(duration);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f001 f8cf 	bl	8001c74 <setTimer8>
				led_status=1;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <blink+0x88>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]
			break;
 8000adc:	e003      	b.n	8000ae6 <blink+0x7e>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e002      	b.n	8000ae8 <blink+0x80>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e000      	b.n	8000ae8 <blink+0x80>
			break;
 8000ae6:	bf00      	nop
	}
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	2000042c 	.word	0x2000042c

08000afc <button_reading>:
		flagForButtonPress3s[i]=0;
		counterForButtonPress3s[i]=DURATION_FOR_AUTO_INCREASING;
	}
}
int flagForPressed=0;
void button_reading ( void ){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	e0ba      	b.n	8000c7e <button_reading+0x182>
		if(timer1_flag==1) {
 8000b08:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <button_reading+0x194>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <button_reading+0x20>
			flagForPressed=0;
 8000b10:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <button_reading+0x198>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
			setTimer1(0);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f001 f820 	bl	8001b5c <setTimer1>
		}
		debounceButtonBuffer3 [i] = debounceButtonBuffer2 [i];
 8000b1c:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <button_reading+0x19c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	7819      	ldrb	r1, [r3, #0]
 8000b24:	4a5d      	ldr	r2, [pc, #372]	; (8000c9c <button_reading+0x1a0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 8000b2e:	4a5c      	ldr	r2, [pc, #368]	; (8000ca0 <button_reading+0x1a4>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4a58      	ldr	r2, [pc, #352]	; (8000c98 <button_reading+0x19c>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin(GPIOA, RESET_Pin*pow(2,i));
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fc57 	bl	80003f4 <__aeabi_i2d>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b52:	f003 f84b 	bl	8003bec <pow>
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <button_reading+0x1a8>)
 8000b5c:	f7ff fcb4 	bl	80004c8 <__aeabi_dmul>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	f7ff ff5e 	bl	8000a28 <__aeabi_d2uiz>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	484d      	ldr	r0, [pc, #308]	; (8000ca8 <button_reading+0x1ac>)
 8000b74:	f001 fd2a 	bl	80025cc <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <button_reading+0x1a4>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	460a      	mov	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
		if (buttonBuffer[i]==BUTTON_IS_RELEASED) {
 8000b86:	4a49      	ldr	r2, [pc, #292]	; (8000cac <button_reading+0x1b0>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d109      	bne.n	8000ba6 <button_reading+0xaa>
			flagForButtonPress3s[i]=0;
 8000b92:	4a47      	ldr	r2, [pc, #284]	; (8000cb0 <button_reading+0x1b4>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2100      	movs	r1, #0
 8000b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[i]=0;
 8000b9c:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <button_reading+0x1b8>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i] && debounceButtonBuffer2[i]==debounceButtonBuffer3[i]) {
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <button_reading+0x1a4>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	493a      	ldr	r1, [pc, #232]	; (8000c98 <button_reading+0x19c>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d15e      	bne.n	8000c78 <button_reading+0x17c>
 8000bba:	4a37      	ldr	r2, [pc, #220]	; (8000c98 <button_reading+0x19c>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	4936      	ldr	r1, [pc, #216]	; (8000c9c <button_reading+0x1a0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	440b      	add	r3, r1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d154      	bne.n	8000c78 <button_reading+0x17c>
			if (buttonBuffer[i] != debounceButtonBuffer3 [i]) {
 8000bce:	4a37      	ldr	r2, [pc, #220]	; (8000cac <button_reading+0x1b0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	4931      	ldr	r1, [pc, #196]	; (8000c9c <button_reading+0x1a0>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	440b      	add	r3, r1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d030      	beq.n	8000c44 <button_reading+0x148>
				buttonBuffer [i] = debounceButtonBuffer3 [i];
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <button_reading+0x1a0>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	7819      	ldrb	r1, [r3, #0]
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <button_reading+0x1b0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
				if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <button_reading+0x1b0>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d13b      	bne.n	8000c78 <button_reading+0x17c>
					flagForButtonPress [i]=1;
 8000c00:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <button_reading+0x1bc>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2101      	movs	r1, #1
 8000c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPress3s [i]=DURATION_FOR_AUTO_INCREASING;
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <button_reading+0x1b8>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (flagForPressed==0) {
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <button_reading+0x198>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <button_reading+0x130>
						setTimer1(50);
 8000c1e:	2032      	movs	r0, #50	; 0x32
 8000c20:	f000 ff9c 	bl	8001b5c <setTimer1>
						flagForPressed=0;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <button_reading+0x198>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e025      	b.n	8000c78 <button_reading+0x17c>
					}
					else {
						flagForButtonDoublePress[i]=1;
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <button_reading+0x1c0>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2101      	movs	r1, #1
 8000c32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForPressed=0;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <button_reading+0x198>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
						setTimer1(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 ff8d 	bl	8001b5c <setTimer1>
 8000c42:	e019      	b.n	8000c78 <button_reading+0x17c>
					}
				}
			}
			else {
				if (buttonBuffer[i]==BUTTON_IS_PRESSED) {
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <button_reading+0x1b0>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d113      	bne.n	8000c78 <button_reading+0x17c>
					counterForButtonPress3s [i]--;
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <button_reading+0x1b8>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	4916      	ldr	r1, [pc, #88]	; (8000cb4 <button_reading+0x1b8>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (counterForButtonPress3s[i]<=0) {
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <button_reading+0x1b8>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	dc04      	bgt.n	8000c78 <button_reading+0x17c>
						flagForButtonPress3s[i]=1;
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <button_reading+0x1b4>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2101      	movs	r1, #1
 8000c74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	f77f af41 	ble.w	8000b08 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200003f4 	.word	0x200003f4
 8000c94:	200000e0 	.word	0x200000e0
 8000c98:	20000098 	.word	0x20000098
 8000c9c:	2000009c 	.word	0x2000009c
 8000ca0:	20000094 	.word	0x20000094
 8000ca4:	40700000 	.word	0x40700000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	200000b0 	.word	0x200000b0
 8000cb4:	200000d0 	.word	0x200000d0
 8000cb8:	200000a0 	.word	0x200000a0
 8000cbc:	200000c0 	.word	0x200000c0

08000cc0 <reset_buffer>:


int state=INIT;
int admin_id;

void reset_buffer() {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
	for (int i=0;i<5;i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e007      	b.n	8000cdc <reset_buffer+0x1c>
		CARD_BUF[i]=0;
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <reset_buffer+0x30>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<5;i++) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	ddf4      	ble.n	8000ccc <reset_buffer+0xc>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200000e8 	.word	0x200000e8

08000cf4 <fsm_run>:

void fsm_run() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	switch (state) {
 8000cf8:	4ba8      	ldr	r3, [pc, #672]	; (8000f9c <fsm_run+0x2a8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	f200 8229 	bhi.w	8001154 <fsm_run+0x460>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <fsm_run+0x14>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d2d 	.word	0x08000d2d
 8000d0c:	08000e35 	.word	0x08000e35
 8000d10:	08000d73 	.word	0x08000d73
 8000d14:	08000eeb 	.word	0x08000eeb
 8000d18:	08000f3f 	.word	0x08000f3f
 8000d1c:	08000fb5 	.word	0x08000fb5
 8000d20:	080010b5 	.word	0x080010b5
 8000d24:	08001053 	.word	0x08001053
 8000d28:	08001115 	.word	0x08001115
	case INIT:
		//quet the admin va bam nut de luu vao bo nho
		//sau khi co the duoc quet , thay doi state
		if (equalZero(CARD_BUF)==0) { //kiem tra da quet the chua
 8000d2c:	489c      	ldr	r0, [pc, #624]	; (8000fa0 <fsm_run+0x2ac>)
 8000d2e:	f000 fdde 	bl	80018ee <equalZero>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d118      	bne.n	8000d6a <fsm_run+0x76>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4899      	ldr	r0, [pc, #612]	; (8000fa4 <fsm_run+0x2b0>)
 8000d3e:	f001 fc5c 	bl	80025fa <HAL_GPIO_WritePin>
			if (flagForButtonPress[REG_IDX]==1) {//nhan nut regist
 8000d42:	4b99      	ldr	r3, [pc, #612]	; (8000fa8 <fsm_run+0x2b4>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 8206 	bne.w	8001158 <fsm_run+0x464>
				flagForButtonPress[REG_IDX]=0;//reset flag
 8000d4c:	4b96      	ldr	r3, [pc, #600]	; (8000fa8 <fsm_run+0x2b4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
				set_admin(CARD_BUF);//set admin
 8000d52:	4893      	ldr	r0, [pc, #588]	; (8000fa0 <fsm_run+0x2ac>)
 8000d54:	f000 fee2 	bl	8001b1c <set_admin>
				reset_buffer();//reset buffer
 8000d58:	f7ff ffb2 	bl	8000cc0 <reset_buffer>
				state=UNLOCK;//chuyen trang thai
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <fsm_run+0x2a8>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	601a      	str	r2, [r3, #0]
				setTimer6(10);
 8000d62:	200a      	movs	r0, #10
 8000d64:	f000 ff5e 	bl	8001c24 <setTimer6>
			}
		}
		else {
			blink(10);
		}
		break;
 8000d68:	e1f6      	b.n	8001158 <fsm_run+0x464>
			blink(10);
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f7ff fe7c 	bl	8000a68 <blink>
		break;
 8000d70:	e1f2      	b.n	8001158 <fsm_run+0x464>
	case UNLOCK:
		if (timer6_flag==1) {
 8000d72:	4b8e      	ldr	r3, [pc, #568]	; (8000fac <fsm_run+0x2b8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d104      	bne.n	8000d84 <fsm_run+0x90>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4889      	ldr	r0, [pc, #548]	; (8000fa4 <fsm_run+0x2b0>)
 8000d80:	f001 fc3b 	bl	80025fa <HAL_GPIO_WritePin>
		}

		//dua ra tin hieu mo cua
		HAL_GPIO_WritePin(LOCK_SIGNAL_GPIO_Port, LOCK_SIGNAL_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4889      	ldr	r0, [pc, #548]	; (8000fb0 <fsm_run+0x2bc>)
 8000d8c:	f001 fc35 	bl	80025fa <HAL_GPIO_WritePin>

		//neu bam nut dong cua, qua trang thai dong cua
		if (flagForButtonPress[LOCK_IDX]==1) {
 8000d90:	4b85      	ldr	r3, [pc, #532]	; (8000fa8 <fsm_run+0x2b4>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d108      	bne.n	8000daa <fsm_run+0xb6>
			reset_buffer();
 8000d98:	f7ff ff92 	bl	8000cc0 <reset_buffer>
			flagForButtonPress[LOCK_IDX]=0;
 8000d9c:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <fsm_run+0x2b4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
			state=LOCK;
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <fsm_run+0x2a8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
				state=LOCK;
			}
			reset_buffer();
		}

		break;
 8000da8:	e1d8      	b.n	800115c <fsm_run+0x468>
		else if (flagForButtonPress[UNLOCK_IDX]==1) {
 8000daa:	4b7f      	ldr	r3, [pc, #508]	; (8000fa8 <fsm_run+0x2b4>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d103      	bne.n	8000dba <fsm_run+0xc6>
			flagForButtonPress[UNLOCK_IDX]=0;
 8000db2:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <fsm_run+0x2b4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
		break;
 8000db8:	e1d0      	b.n	800115c <fsm_run+0x468>
		else if (flagForButtonPress[REG_IDX]==1)  {
 8000dba:	4b7b      	ldr	r3, [pc, #492]	; (8000fa8 <fsm_run+0x2b4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10c      	bne.n	8000ddc <fsm_run+0xe8>
			flagForButtonPress[REG_IDX]=0;
 8000dc2:	4b79      	ldr	r3, [pc, #484]	; (8000fa8 <fsm_run+0x2b4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
			reset_buffer();
 8000dc8:	f7ff ff7a 	bl	8000cc0 <reset_buffer>
			setTimer2(500);
 8000dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd0:	f000 fed8 	bl	8001b84 <setTimer2>
			state=REG_PROCESS;
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <fsm_run+0x2a8>)
 8000dd6:	2206      	movs	r2, #6
 8000dd8:	601a      	str	r2, [r3, #0]
		break;
 8000dda:	e1bf      	b.n	800115c <fsm_run+0x468>
		else if (flagForButtonPress[RESET_IDX]==1) {
 8000ddc:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <fsm_run+0x2b4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10c      	bne.n	8000dfe <fsm_run+0x10a>
			flagForButtonPress[RESET_IDX]=0;
 8000de4:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <fsm_run+0x2b4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8000dea:	f7ff ff69 	bl	8000cc0 <reset_buffer>
			setTimer3(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df2:	f000 fedb 	bl	8001bac <setTimer3>
			state=MEM_DELETE;
 8000df6:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <fsm_run+0x2a8>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
		break;
 8000dfc:	e1ae      	b.n	800115c <fsm_run+0x468>
		else if (equalZero(CARD_BUF)==0) {
 8000dfe:	4868      	ldr	r0, [pc, #416]	; (8000fa0 <fsm_run+0x2ac>)
 8000e00:	f000 fd75 	bl	80018ee <equalZero>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 81a8 	bne.w	800115c <fsm_run+0x468>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4864      	ldr	r0, [pc, #400]	; (8000fa4 <fsm_run+0x2b0>)
 8000e12:	f001 fbf2 	bl	80025fa <HAL_GPIO_WritePin>
			setTimer6(10);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f000 ff04 	bl	8001c24 <setTimer6>
			if (search(CARD_BUF)==1) {
 8000e1c:	4860      	ldr	r0, [pc, #384]	; (8000fa0 <fsm_run+0x2ac>)
 8000e1e:	f000 fe2f 	bl	8001a80 <search>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d102      	bne.n	8000e2e <fsm_run+0x13a>
				state=LOCK;
 8000e28:	4b5c      	ldr	r3, [pc, #368]	; (8000f9c <fsm_run+0x2a8>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8000e2e:	f7ff ff47 	bl	8000cc0 <reset_buffer>
		break;
 8000e32:	e193      	b.n	800115c <fsm_run+0x468>
	case LOCK:
		if (timer6_flag==1) {
 8000e34:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <fsm_run+0x2b8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d104      	bne.n	8000e46 <fsm_run+0x152>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4858      	ldr	r0, [pc, #352]	; (8000fa4 <fsm_run+0x2b0>)
 8000e42:	f001 fbda 	bl	80025fa <HAL_GPIO_WritePin>
		}
		//dua ra tin hieu dong cua
		HAL_GPIO_WritePin(LOCK_SIGNAL_GPIO_Port, LOCK_SIGNAL_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4c:	4858      	ldr	r0, [pc, #352]	; (8000fb0 <fsm_run+0x2bc>)
 8000e4e:	f001 fbd4 	bl	80025fa <HAL_GPIO_WritePin>

		//neu bam nut mo cua, qua trang thai mo cua
		if (flagForButtonPress[UNLOCK_IDX]==1) {
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <fsm_run+0x2b4>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d106      	bne.n	8000e68 <fsm_run+0x174>
			flagForButtonPress[UNLOCK_IDX]=0;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <fsm_run+0x2b4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
			state=UNLOCK;
 8000e60:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <fsm_run+0x2a8>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
				setTimer6(10);
			}
		}

		break;
 8000e66:	e17b      	b.n	8001160 <fsm_run+0x46c>
		else if (flagForButtonPress[LOCK_IDX]==1) {
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <fsm_run+0x2b4>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d103      	bne.n	8000e78 <fsm_run+0x184>
			flagForButtonPress[LOCK_IDX]=0;
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <fsm_run+0x2b4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
		break;
 8000e76:	e173      	b.n	8001160 <fsm_run+0x46c>
		else if (flagForButtonPress[REG_IDX]==1) {
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <fsm_run+0x2b4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d103      	bne.n	8000e88 <fsm_run+0x194>
			flagForButtonPress[REG_IDX]=0;
 8000e80:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <fsm_run+0x2b4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
		break;
 8000e86:	e16b      	b.n	8001160 <fsm_run+0x46c>
		else if (flagForButtonPress[RESET_IDX]==1) {
 8000e88:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <fsm_run+0x2b4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d103      	bne.n	8000e98 <fsm_run+0x1a4>
			flagForButtonPress[RESET_IDX]=0;
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <fsm_run+0x2b4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
		break;
 8000e96:	e163      	b.n	8001160 <fsm_run+0x46c>
		else if (equalZero(CARD_BUF)==0) {
 8000e98:	4841      	ldr	r0, [pc, #260]	; (8000fa0 <fsm_run+0x2ac>)
 8000e9a:	f000 fd28 	bl	80018ee <equalZero>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 815d 	bne.w	8001160 <fsm_run+0x46c>
			if (search(CARD_BUF)==1) {
 8000ea6:	483e      	ldr	r0, [pc, #248]	; (8000fa0 <fsm_run+0x2ac>)
 8000ea8:	f000 fdea 	bl	8001a80 <search>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10d      	bne.n	8000ece <fsm_run+0x1da>
				reset_buffer();
 8000eb2:	f7ff ff05 	bl	8000cc0 <reset_buffer>
				state=UNLOCK;
 8000eb6:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <fsm_run+0x2a8>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4838      	ldr	r0, [pc, #224]	; (8000fa4 <fsm_run+0x2b0>)
 8000ec2:	f001 fb9a 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer6(10);
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f000 feac 	bl	8001c24 <setTimer6>
		break;
 8000ecc:	e148      	b.n	8001160 <fsm_run+0x46c>
				state=WRONG1;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <fsm_run+0x2a8>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	601a      	str	r2, [r3, #0]
				reset_buffer();
 8000ed4:	f7ff fef4 	bl	8000cc0 <reset_buffer>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2101      	movs	r1, #1
 8000edc:	4831      	ldr	r0, [pc, #196]	; (8000fa4 <fsm_run+0x2b0>)
 8000ede:	f001 fb8c 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer6(10);
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f000 fe9e 	bl	8001c24 <setTimer6>
		break;
 8000ee8:	e13a      	b.n	8001160 <fsm_run+0x46c>
			state=UNLOCK;
		}
		else {
			state=WRONG2;
		}*/
		if (timer6_flag==1) {
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <fsm_run+0x2b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d104      	bne.n	8000efc <fsm_run+0x208>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	482b      	ldr	r0, [pc, #172]	; (8000fa4 <fsm_run+0x2b0>)
 8000ef8:	f001 fb7f 	bl	80025fa <HAL_GPIO_WritePin>
		}
		if (equalZero(CARD_BUF)==0) {
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <fsm_run+0x2ac>)
 8000efe:	f000 fcf6 	bl	80018ee <equalZero>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 812d 	bne.w	8001164 <fsm_run+0x470>
			if (search(CARD_BUF)==1) {
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <fsm_run+0x2ac>)
 8000f0c:	f000 fdb8 	bl	8001a80 <search>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <fsm_run+0x22e>
				reset_buffer();
 8000f16:	f7ff fed3 	bl	8000cc0 <reset_buffer>
				state=UNLOCK;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <fsm_run+0x2a8>)
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	601a      	str	r2, [r3, #0]
				state=WRONG2;
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
				setTimer6(10);
			}
		}
		break;
 8000f20:	e120      	b.n	8001164 <fsm_run+0x470>
				reset_buffer();
 8000f22:	f7ff fecd 	bl	8000cc0 <reset_buffer>
				state=WRONG2;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <fsm_run+0x2a8>)
 8000f28:	2204      	movs	r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2101      	movs	r1, #1
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <fsm_run+0x2b0>)
 8000f32:	f001 fb62 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer6(10);
 8000f36:	200a      	movs	r0, #10
 8000f38:	f000 fe74 	bl	8001c24 <setTimer6>
		break;
 8000f3c:	e112      	b.n	8001164 <fsm_run+0x470>
	case WRONG2:
		if (timer6_flag==1) {
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <fsm_run+0x2b8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d104      	bne.n	8000f50 <fsm_run+0x25c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <fsm_run+0x2b0>)
 8000f4c:	f001 fb55 	bl	80025fa <HAL_GPIO_WritePin>
		}
		else {
			state=ALARM;
			setTimer1(500);
		}*/
		if (equalZero(CARD_BUF)==0) {
 8000f50:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <fsm_run+0x2ac>)
 8000f52:	f000 fccc 	bl	80018ee <equalZero>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f040 8105 	bne.w	8001168 <fsm_run+0x474>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2101      	movs	r1, #1
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <fsm_run+0x2b0>)
 8000f64:	f001 fb49 	bl	80025fa <HAL_GPIO_WritePin>
			setTimer6(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f000 fe5b 	bl	8001c24 <setTimer6>
			if (search(CARD_BUF)==1) {
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <fsm_run+0x2ac>)
 8000f70:	f000 fd86 	bl	8001a80 <search>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <fsm_run+0x292>
				reset_buffer();
 8000f7a:	f7ff fea1 	bl	8000cc0 <reset_buffer>
				state=UNLOCK;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <fsm_run+0x2a8>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	601a      	str	r2, [r3, #0]
				reset_buffer();
				state=ALARM;
				setTimer7(500);
			}
		}
		break;
 8000f84:	e0f0      	b.n	8001168 <fsm_run+0x474>
				reset_buffer();
 8000f86:	f7ff fe9b 	bl	8000cc0 <reset_buffer>
				state=ALARM;
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <fsm_run+0x2a8>)
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	601a      	str	r2, [r3, #0]
				setTimer7(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f000 fe5a 	bl	8001c4c <setTimer7>
		break;
 8000f98:	e0e6      	b.n	8001168 <fsm_run+0x474>
 8000f9a:	bf00      	nop
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	200000e8 	.word	0x200000e8
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	200000a0 	.word	0x200000a0
 8000fac:	2000041c 	.word	0x2000041c
 8000fb0:	40011000 	.word	0x40011000
	case ALARM:
		if (timer6_flag==1) {
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <fsm_run+0x480>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d104      	bne.n	8000fc6 <fsm_run+0x2d2>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	486d      	ldr	r0, [pc, #436]	; (8001178 <fsm_run+0x484>)
 8000fc2:	f001 fb1a 	bl	80025fa <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fcc:	486b      	ldr	r0, [pc, #428]	; (800117c <fsm_run+0x488>)
 8000fce:	f001 fb14 	bl	80025fa <HAL_GPIO_WritePin>
			state=UNLOCK;
		}
		else {
			state=ALARM;
		}*/
		if (equalZero(CARD_BUF)==0) {
 8000fd2:	486b      	ldr	r0, [pc, #428]	; (8001180 <fsm_run+0x48c>)
 8000fd4:	f000 fc8b 	bl	80018ee <equalZero>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d125      	bne.n	800102a <fsm_run+0x336>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4865      	ldr	r0, [pc, #404]	; (8001178 <fsm_run+0x484>)
 8000fe4:	f001 fb09 	bl	80025fa <HAL_GPIO_WritePin>
			setTimer6(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f000 fe1b 	bl	8001c24 <setTimer6>
			if (search(CARD_BUF)==1) {
 8000fee:	4864      	ldr	r0, [pc, #400]	; (8001180 <fsm_run+0x48c>)
 8000ff0:	f000 fd46 	bl	8001a80 <search>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10e      	bne.n	8001018 <fsm_run+0x324>
				reset_buffer();
 8000ffa:	f7ff fe61 	bl	8000cc0 <reset_buffer>
				state=UNLOCK;
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <fsm_run+0x490>)
 8001000:	2202      	movs	r2, #2
 8001002:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	485c      	ldr	r0, [pc, #368]	; (800117c <fsm_run+0x488>)
 800100c:	f001 faf5 	bl	80025fa <HAL_GPIO_WritePin>
				setTimer7(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fe1b 	bl	8001c4c <setTimer7>
 8001016:	e008      	b.n	800102a <fsm_run+0x336>
			}
			else {
				state=ALARM;
 8001018:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <fsm_run+0x490>)
 800101a:	2205      	movs	r2, #5
 800101c:	601a      	str	r2, [r3, #0]
				reset_buffer();
 800101e:	f7ff fe4f 	bl	8000cc0 <reset_buffer>
				setTimer7(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001026:	f000 fe11 	bl	8001c4c <setTimer7>
			}
		}
		if (timer7_flag==1) {
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <fsm_run+0x494>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f040 809c 	bne.w	800116c <fsm_run+0x478>
			timer7_flag=0;
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <fsm_run+0x494>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
			state=WRONG2;
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <fsm_run+0x490>)
 800103c:	2204      	movs	r2, #4
 800103e:	601a      	str	r2, [r3, #0]
			reset_buffer();
 8001040:	f7ff fe3e 	bl	8000cc0 <reset_buffer>
			HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	484c      	ldr	r0, [pc, #304]	; (800117c <fsm_run+0x488>)
 800104c:	f001 fad5 	bl	80025fa <HAL_GPIO_WritePin>
		}
		break;
 8001050:	e08c      	b.n	800116c <fsm_run+0x478>
	case MEM_DELETE:
		//Trong 5s k lam gi se tro ve trang thai UNLOCK
		//Neu the duoc quet vao la the admin se xoa bo nho
		//Neu the duoc quet khong phai the admin, tro ve trang thai UNLOCK
		if (timer3_flag==1) {
 8001052:	4b4e      	ldr	r3, [pc, #312]	; (800118c <fsm_run+0x498>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d106      	bne.n	8001068 <fsm_run+0x374>
			state=UNLOCK;
 800105a:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <fsm_run+0x490>)
 800105c:	2202      	movs	r2, #2
 800105e:	601a      	str	r2, [r3, #0]
			setTimer3(0);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 fda3 	bl	8001bac <setTimer3>
			}
			else {
				blink(10);
			}
		}
		break;
 8001066:	e082      	b.n	800116e <fsm_run+0x47a>
			if (equalZero(CARD_BUF)==0) {
 8001068:	4845      	ldr	r0, [pc, #276]	; (8001180 <fsm_run+0x48c>)
 800106a:	f000 fc40 	bl	80018ee <equalZero>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11b      	bne.n	80010ac <fsm_run+0x3b8>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2101      	movs	r1, #1
 8001078:	483f      	ldr	r0, [pc, #252]	; (8001178 <fsm_run+0x484>)
 800107a:	f001 fabe 	bl	80025fa <HAL_GPIO_WritePin>
				if (check_admin(CARD_BUF)==1) {
 800107e:	4840      	ldr	r0, [pc, #256]	; (8001180 <fsm_run+0x48c>)
 8001080:	f000 fd5c 	bl	8001b3c <check_admin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <fsm_run+0x3a6>
					delete_card();
 800108a:	f000 fd3f 	bl	8001b0c <delete_card>
					state=UNLOCK;
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <fsm_run+0x490>)
 8001090:	2202      	movs	r2, #2
 8001092:	601a      	str	r2, [r3, #0]
					reset_buffer();
 8001094:	f7ff fe14 	bl	8000cc0 <reset_buffer>
		break;
 8001098:	e069      	b.n	800116e <fsm_run+0x47a>
					setTimer3(0);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fd86 	bl	8001bac <setTimer3>
					reset_buffer();
 80010a0:	f7ff fe0e 	bl	8000cc0 <reset_buffer>
					state=UNLOCK;
 80010a4:	4b37      	ldr	r3, [pc, #220]	; (8001184 <fsm_run+0x490>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
		break;
 80010aa:	e060      	b.n	800116e <fsm_run+0x47a>
				blink(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f7ff fcdb 	bl	8000a68 <blink>
		break;
 80010b2:	e05c      	b.n	800116e <fsm_run+0x47a>
	case REG_PROCESS:
		//Trong 5s k lam gi se tro ve trang thai UNLOCK
		//Neu the duoc quet khong phai the admin, tro ve trang thai UNLOCK
		//Neu the duoc quet vao la the admin, sau do quet the can dang ki vao se luu the vua quet vao bo nho
		if (timer2_flag==1) {
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <fsm_run+0x49c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d103      	bne.n	80010c4 <fsm_run+0x3d0>
			state=UNLOCK;
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <fsm_run+0x490>)
 80010be:	2202      	movs	r2, #2
 80010c0:	601a      	str	r2, [r3, #0]
			}
			else {
				blink(10);
			}
		}
		break;
 80010c2:	e054      	b.n	800116e <fsm_run+0x47a>
			if (equalZero(CARD_BUF)==0) {
 80010c4:	482e      	ldr	r0, [pc, #184]	; (8001180 <fsm_run+0x48c>)
 80010c6:	f000 fc12 	bl	80018ee <equalZero>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11d      	bne.n	800110c <fsm_run+0x418>
				if (check_admin(CARD_BUF)==1) {
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <fsm_run+0x48c>)
 80010d2:	f000 fd33 	bl	8001b3c <check_admin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10e      	bne.n	80010fa <fsm_run+0x406>
					state=REGIST;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <fsm_run+0x490>)
 80010de:	2208      	movs	r2, #8
 80010e0:	601a      	str	r2, [r3, #0]
					setTimer4(5000);
 80010e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e6:	f000 fd75 	bl	8001bd4 <setTimer4>
					reset_buffer();
 80010ea:	f7ff fde9 	bl	8000cc0 <reset_buffer>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <fsm_run+0x484>)
 80010f4:	f001 fa81 	bl	80025fa <HAL_GPIO_WritePin>
		break;
 80010f8:	e039      	b.n	800116e <fsm_run+0x47a>
					setTimer2(0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 fd42 	bl	8001b84 <setTimer2>
					reset_buffer();
 8001100:	f7ff fdde 	bl	8000cc0 <reset_buffer>
					state=UNLOCK;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <fsm_run+0x490>)
 8001106:	2202      	movs	r2, #2
 8001108:	601a      	str	r2, [r3, #0]
		break;
 800110a:	e030      	b.n	800116e <fsm_run+0x47a>
				blink(10);
 800110c:	200a      	movs	r0, #10
 800110e:	f7ff fcab 	bl	8000a68 <blink>
		break;
 8001112:	e02c      	b.n	800116e <fsm_run+0x47a>
	case REGIST:
		if (timer4_flag==1) {
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <fsm_run+0x4a0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <fsm_run+0x43a>
			state=UNLOCK;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <fsm_run+0x490>)
 800111e:	2202      	movs	r2, #2
 8001120:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2101      	movs	r1, #1
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <fsm_run+0x484>)
 8001128:	f001 fa67 	bl	80025fa <HAL_GPIO_WritePin>
					reset_buffer();
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
			}
		}
	default:
		break;
 800112c:	e012      	b.n	8001154 <fsm_run+0x460>
			if (equalZero(CARD_BUF)==0) {
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <fsm_run+0x48c>)
 8001130:	f000 fbdd 	bl	80018ee <equalZero>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <fsm_run+0x460>
					add_new_card(CARD_BUF);
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <fsm_run+0x48c>)
 800113c:	f000 fcda 	bl	8001af4 <add_new_card>
					state=UNLOCK;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <fsm_run+0x490>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
					reset_buffer();
 8001146:	f7ff fdbb 	bl	8000cc0 <reset_buffer>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2101      	movs	r1, #1
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <fsm_run+0x484>)
 8001150:	f001 fa53 	bl	80025fa <HAL_GPIO_WritePin>
		break;
 8001154:	bf00      	nop
 8001156:	e00a      	b.n	800116e <fsm_run+0x47a>
		break;
 8001158:	bf00      	nop
 800115a:	e008      	b.n	800116e <fsm_run+0x47a>
		break;
 800115c:	bf00      	nop
 800115e:	e006      	b.n	800116e <fsm_run+0x47a>
		break;
 8001160:	bf00      	nop
 8001162:	e004      	b.n	800116e <fsm_run+0x47a>
		break;
 8001164:	bf00      	nop
 8001166:	e002      	b.n	800116e <fsm_run+0x47a>
		break;
 8001168:	bf00      	nop
 800116a:	e000      	b.n	800116e <fsm_run+0x47a>
		break;
 800116c:	bf00      	nop
	}
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000041c 	.word	0x2000041c
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40010800 	.word	0x40010800
 8001180:	200000e8 	.word	0x200000e8
 8001184:	200000e4 	.word	0x200000e4
 8001188:	20000424 	.word	0x20000424
 800118c:	20000404 	.word	0x20000404
 8001190:	200003fc 	.word	0x200003fc
 8001194:	2000040c 	.word	0x2000040c

08001198 <spi_transfer>:




uint8_t spi_transfer (uint8_t byte_s)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &byte_s, &rx, 1, 0xffffffff);
 80011a2:	f107 020f 	add.w	r2, r7, #15
 80011a6:	1df9      	adds	r1, r7, #7
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <spi_transfer+0x28>)
 80011b2:	f001 fea7 	bl	8002f04 <HAL_SPI_TransmitReceive>
	return rx;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000f0 	.word	0x200000f0

080011c4 <Write_MFRC522>:





void Write_MFRC522 (uchar addr, uchar val) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]

 cs_clr;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <Write_MFRC522+0x4c>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <Write_MFRC522+0x4c>)
 80011da:	f023 0308 	bic.w	r3, r3, #8
 80011de:	60d3      	str	r3, [r2, #12]
 spi_transfer(((addr << 1) & 0x7E));
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffd3 	bl	8001198 <spi_transfer>
 spi_transfer(val);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffcf 	bl	8001198 <spi_transfer>
 cs_set;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <Write_MFRC522+0x4c>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <Write_MFRC522+0x4c>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	60d3      	str	r3, [r2, #12]

}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40010800 	.word	0x40010800

08001214 <Read_MFRC522>:


uchar Read_MFRC522(uchar addr) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]

 int value;
 cs_clr;
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <Read_MFRC522+0x54>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <Read_MFRC522+0x54>)
 8001224:	f023 0308 	bic.w	r3, r3, #8
 8001228:	60d3      	str	r3, [r2, #12]
 spi_transfer((((addr << 1) & 0x7E) | 0x80));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	b25b      	sxtb	r3, r3
 8001230:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001234:	b25b      	sxtb	r3, r3
 8001236:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffaa 	bl	8001198 <spi_transfer>
 value=spi_transfer(0x00);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ffa7 	bl	8001198 <spi_transfer>
 800124a:	4603      	mov	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
 cs_set;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <Read_MFRC522+0x54>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <Read_MFRC522+0x54>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	60d3      	str	r3, [r2, #12]

 return value;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	b2db      	uxtb	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010800 	.word	0x40010800

0800126c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001270:	210f      	movs	r1, #15
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ffa6 	bl	80011c4 <Write_MFRC522>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  MFRC522_Reset();
 8001280:	f7ff fff4 	bl	800126c <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001284:	218d      	movs	r1, #141	; 0x8d
 8001286:	202a      	movs	r0, #42	; 0x2a
 8001288:	f7ff ff9c 	bl	80011c4 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 800128c:	213e      	movs	r1, #62	; 0x3e
 800128e:	202b      	movs	r0, #43	; 0x2b
 8001290:	f7ff ff98 	bl	80011c4 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 30);
 8001294:	211e      	movs	r1, #30
 8001296:	202d      	movs	r0, #45	; 0x2d
 8001298:	f7ff ff94 	bl	80011c4 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0);
 800129c:	2100      	movs	r1, #0
 800129e:	202c      	movs	r0, #44	; 0x2c
 80012a0:	f7ff ff90 	bl	80011c4 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	2015      	movs	r0, #21
 80012a8:	f7ff ff8c 	bl	80011c4 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80012ac:	213d      	movs	r1, #61	; 0x3d
 80012ae:	2011      	movs	r0, #17
 80012b0:	f7ff ff88 	bl	80011c4 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80012b4:	f000 f802 	bl	80012bc <AntennaOn>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 80012c0:	2103      	movs	r1, #3
 80012c2:	2014      	movs	r0, #20
 80012c4:	f000 f802 	bl	80012cc <SetBitMask>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff98 	bl	8001214 <Read_MFRC522>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff65 	bl	80011c4 <Write_MFRC522>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af02      	add	r7, sp, #8
 8001308:	4603      	mov	r3, r0
 800130a:	6039      	str	r1, [r7, #0]
 800130c:	71fb      	strb	r3, [r7, #7]
  uchar status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);
 800130e:	2107      	movs	r1, #7
 8001310:	200d      	movs	r0, #13
 8001312:	f7ff ff57 	bl	80011c4 <Write_MFRC522>
   // TxLastBists = BitFramingReg[2..0]

  TagType[0] = reqMode;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2201      	movs	r2, #1
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	200c      	movs	r0, #12
 800132a:	f000 f80f 	bl	800134c <MFRC522_ToCard>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <MFRC522_Request+0x3c>
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d001      	beq.n	8001342 <MFRC522_Request+0x40>
    status = MI_ERR;
 800133e:	2302      	movs	r3, #2
 8001340:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	4613      	mov	r3, r2
 800135c:	73bb      	strb	r3, [r7, #14]
  uchar status = MI_ERR;
 800135e:	2302      	movs	r3, #2
 8001360:	77fb      	strb	r3, [r7, #31]
  uchar irqEn = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	77bb      	strb	r3, [r7, #30]
  uchar waitIRq = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	777b      	strb	r3, [r7, #29]
  uchar lastBits;
  uchar n;
  uint i;

  switch (command)
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d006      	beq.n	800137e <MFRC522_ToCard+0x32>
 8001370:	2b0e      	cmp	r3, #14
 8001372:	d109      	bne.n	8001388 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001374:	2312      	movs	r3, #18
 8001376:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8001378:	2310      	movs	r3, #16
 800137a:	777b      	strb	r3, [r7, #29]
        break;
 800137c:	e005      	b.n	800138a <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 800137e:	2377      	movs	r3, #119	; 0x77
 8001380:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8001382:	2330      	movs	r3, #48	; 0x30
 8001384:	777b      	strb	r3, [r7, #29]
        break;
 8001386:	e000      	b.n	800138a <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8001388:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800138a:	7fbb      	ldrb	r3, [r7, #30]
 800138c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff ff15 	bl	80011c4 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	2004      	movs	r0, #4
 800139e:	f000 f89e 	bl	80014de <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	200a      	movs	r0, #10
 80013a6:	f7ff ff91 	bl	80012cc <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 80013aa:	2100      	movs	r1, #0
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff ff09 	bl	80011c4 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e00a      	b.n	80013ce <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	2009      	movs	r0, #9
 80013c4:	f7ff fefe 	bl	80011c4 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	3301      	adds	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3f0      	bcc.n	80013b8 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4619      	mov	r1, r3
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fef2 	bl	80011c4 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d103      	bne.n	80013ee <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	200d      	movs	r0, #13
 80013ea:	f7ff ff6f 	bl	80012cc <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80013ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013f2:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80013f4:	2004      	movs	r0, #4
 80013f6:	f7ff ff0d 	bl	8001214 <Read_MFRC522>
 80013fa:	4603      	mov	r3, r0
 80013fc:	773b      	strb	r3, [r7, #28]
    i--;
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	3b01      	subs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <MFRC522_ToCard+0xd4>
 800140a:	7f3b      	ldrb	r3, [r7, #28]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <MFRC522_ToCard+0xd4>
 8001414:	7f3a      	ldrb	r2, [r7, #28]
 8001416:	7f7b      	ldrb	r3, [r7, #29]
 8001418:	4013      	ands	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0e9      	beq.n	80013f4 <MFRC522_ToCard+0xa8>
  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	200d      	movs	r0, #13
 8001424:	f000 f85b 	bl	80014de <ClearBitMask>
  if (i != 0)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d052      	beq.n	80014d4 <MFRC522_ToCard+0x188>
  {
		if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 800142e:	2006      	movs	r0, #6
 8001430:	f7ff fef0 	bl	8001214 <Read_MFRC522>
 8001434:	4603      	mov	r3, r0
 8001436:	f003 031b 	and.w	r3, r3, #27
 800143a:	2b00      	cmp	r3, #0
 800143c:	d148      	bne.n	80014d0 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8001442:	7f3a      	ldrb	r2, [r7, #28]
 8001444:	7fbb      	ldrb	r3, [r7, #30]
 8001446:	4013      	ands	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8001452:	2301      	movs	r3, #1
 8001454:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d13b      	bne.n	80014d4 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800145c:	200a      	movs	r0, #10
 800145e:	f7ff fed9 	bl	8001214 <Read_MFRC522>
 8001462:	4603      	mov	r3, r0
 8001464:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001466:	200c      	movs	r0, #12
 8001468:	f7ff fed4 	bl	8001214 <Read_MFRC522>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 800147a:	7f3b      	ldrb	r3, [r7, #28]
 800147c:	3b01      	subs	r3, #1
 800147e:	00da      	lsls	r2, r3, #3
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e004      	b.n	8001496 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 800148c:	7f3b      	ldrb	r3, [r7, #28]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	461a      	mov	r2, r3
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001496:	7f3b      	ldrb	r3, [r7, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <MFRC522_ToCard+0x154>
        {
          n = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 80014a0:	7f3b      	ldrb	r3, [r7, #28]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d901      	bls.n	80014aa <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 80014a6:	2310      	movs	r3, #16
 80014a8:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	e00a      	b.n	80014c6 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	18d4      	adds	r4, r2, r3
 80014b6:	2009      	movs	r0, #9
 80014b8:	f7ff feac 	bl	8001214 <Read_MFRC522>
 80014bc:	4603      	mov	r3, r0
 80014be:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	3301      	adds	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	7f3b      	ldrb	r3, [r7, #28]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3f0      	bcc.n	80014b0 <MFRC522_ToCard+0x164>
 80014ce:	e001      	b.n	80014d4 <MFRC522_ToCard+0x188>
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");

      status = MI_ERR;
 80014d0:	2302      	movs	r3, #2
 80014d2:	77fb      	strb	r3, [r7, #31]

  }



  return status;
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd90      	pop	{r4, r7, pc}

080014de <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	460a      	mov	r2, r1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	4613      	mov	r3, r2
 80014ec:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe8f 	bl	8001214 <Read_MFRC522>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80014fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014fe:	43db      	mvns	r3, r3
 8001500:	b25a      	sxtb	r2, r3
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4013      	ands	r3, r2
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe57 	bl	80011c4 <Write_MFRC522>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
  uchar status;
  uchar i;
  uchar serNumCheck=0;
 8001526:	2300      	movs	r3, #0
 8001528:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800152a:	2100      	movs	r1, #0
 800152c:	200d      	movs	r0, #13
 800152e:	f7ff fe49 	bl	80011c4 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2293      	movs	r2, #147	; 0x93
 8001536:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	2220      	movs	r2, #32
 800153e:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE , serNum, 2, serNum, &unLen);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2202      	movs	r2, #2
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	200c      	movs	r0, #12
 800154e:	f7ff fefd 	bl	800134c <MFRC522_ToCard>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d118      	bne.n	800158e <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	e009      	b.n	8001576 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	4053      	eors	r3, r2
 800156e:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	3301      	adds	r3, #1
 8001574:	73bb      	strb	r3, [r7, #14]
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d9f2      	bls.n	8001562 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	7b7a      	ldrb	r2, [r7, #13]
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 800158a:	2302      	movs	r3, #2
 800158c:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159e:	f000 fd21 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a2:	f000 f837 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a6:	f000 f8f3 	bl	8001790 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015aa:	f000 f86f 	bl	800168c <MX_SPI1_Init>
  MX_TIM2_Init();
 80015ae:	f000 f8a3 	bl	80016f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SPI_mfrc_Init();
 80015b2:	f000 f97d 	bl	80018b0 <SPI_mfrc_Init>
  MFRC522_Init();
 80015b6:	f7ff fe61 	bl	800127c <MFRC522_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80015ba:	4813      	ldr	r0, [pc, #76]	; (8001608 <main+0x70>)
 80015bc:	f001 ff3a 	bl	8003434 <HAL_TIM_Base_Start_IT>
  reset_buffer();
 80015c0:	f7ff fb7e 	bl	8000cc0 <reset_buffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer5(100);
 80015c4:	2064      	movs	r0, #100	; 0x64
 80015c6:	f000 fb19 	bl	8001bfc <setTimer5>
  while (1)
  {

	  if (timer5_flag==1) {
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <main+0x74>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d116      	bne.n	8001600 <main+0x68>
		  if (MFRC522_Request(PICC_REQIDL, str)==MI_OK) {
 80015d2:	463b      	mov	r3, r7
 80015d4:	4619      	mov	r1, r3
 80015d6:	2026      	movs	r0, #38	; 0x26
 80015d8:	f7ff fe93 	bl	8001302 <MFRC522_Request>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10e      	bne.n	8001600 <main+0x68>
			if (MFRC522_Anticoll(str)==MI_OK){
 80015e2:	463b      	mov	r3, r7
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff9a 	bl	800151e <MFRC522_Anticoll>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <main+0x68>
				duplicateID(CARD_BUF, str);
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <main+0x78>)
 80015f6:	f000 f9b5 	bl	8001964 <duplicateID>
				setTimer5(100);
 80015fa:	2064      	movs	r0, #100	; 0x64
 80015fc:	f000 fafe 	bl	8001bfc <setTimer5>
			}
		  }
	  }
	  fsm_run();
 8001600:	f7ff fb78 	bl	8000cf4 <fsm_run>
	  if (timer5_flag==1) {
 8001604:	e7e1      	b.n	80015ca <main+0x32>
 8001606:	bf00      	nop
 8001608:	20000148 	.word	0x20000148
 800160c:	20000414 	.word	0x20000414
 8001610:	200000e8 	.word	0x200000e8

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	; 0x40
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0318 	add.w	r3, r7, #24
 800161e:	2228      	movs	r2, #40	; 0x28
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fada 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163e:	2310      	movs	r3, #16
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f000 ffee 	bl	800262c <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001656:	f000 f945 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fa5c 	bl	8002b30 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800167e:	f000 f931 	bl	80018e4 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3740      	adds	r7, #64	; 0x40
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI1_Init+0x64>)
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <MX_SPI1_Init+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_SPI1_Init+0x64>)
 8001698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800169c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016d8:	220a      	movs	r2, #10
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_SPI1_Init+0x64>)
 80016de:	f001 fb8d 	bl	8002dfc <HAL_SPI_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016e8:	f000 f8fc 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000f0 	.word	0x200000f0
 80016f4:	40013000 	.word	0x40013000

080016f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM2_Init+0x94>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_TIM2_Init+0x94>)
 800171e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM2_Init+0x94>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_TIM2_Init+0x94>)
 800172c:	2209      	movs	r2, #9
 800172e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_TIM2_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM2_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173c:	4813      	ldr	r0, [pc, #76]	; (800178c <MX_TIM2_Init+0x94>)
 800173e:	f001 fe29 	bl	8003394 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001748:	f000 f8cc 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <MX_TIM2_Init+0x94>)
 800175a:	f001 ffc5 	bl	80036e8 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001764:	f000 f8be 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_TIM2_Init+0x94>)
 8001776:	f002 f997 	bl	8003aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001780:	f000 f8b0 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000148 	.word	0x20000148

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a37      	ldr	r2, [pc, #220]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0x110>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_SIGNAL_GPIO_Port, LOCK_SIGNAL_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4826      	ldr	r0, [pc, #152]	; (80018a4 <MX_GPIO_Init+0x114>)
 800180c:	f000 fef5 	bl	80025fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f241 0118 	movw	r1, #4120	; 0x1018
 8001816:	4824      	ldr	r0, [pc, #144]	; (80018a8 <MX_GPIO_Init+0x118>)
 8001818:	f000 feef 	bl	80025fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	4822      	ldr	r0, [pc, #136]	; (80018ac <MX_GPIO_Init+0x11c>)
 8001822:	f000 feea 	bl	80025fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LOCK_SIGNAL_Pin */
  GPIO_InitStruct.Pin = LOCK_SIGNAL_Pin;
 8001826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOCK_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4819      	ldr	r0, [pc, #100]	; (80018a4 <MX_GPIO_Init+0x114>)
 8001840:	f000 fd40 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 BUZZER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|BUZZER_Pin;
 8001844:	f241 0318 	movw	r3, #4120	; 0x1018
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2302      	movs	r3, #2
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	4812      	ldr	r0, [pc, #72]	; (80018a8 <MX_GPIO_Init+0x118>)
 800185e:	f000 fd31 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001862:	2301      	movs	r3, #1
 8001864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <MX_GPIO_Init+0x11c>)
 800187a:	f000 fd23 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin REGISTER_Pin LOCK_Pin UNLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|REGISTER_Pin|LOCK_Pin|UNLOCK_Pin;
 800187e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_GPIO_Init+0x118>)
 8001894:	f000 fd16 	bl	80022c4 <HAL_GPIO_Init>

}
 8001898:	bf00      	nop
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40011000 	.word	0x40011000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00

080018b0 <SPI_mfrc_Init>:

/* USER CODE BEGIN 4 */
void SPI_mfrc_Init(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	CS_PORT_NAME->ODR |= 1<<CS_PIN_NUM;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SPI_mfrc_Init+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <SPI_mfrc_Init+0x18>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40010800 	.word	0x40010800

080018cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	timeRun();
 80018d4:	f000 f9e2 	bl	8001c9c <timeRun>
	button_reading();
 80018d8:	f7ff f910 	bl	8000afc <button_reading>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>

080018ee <equalZero>:
struct node admin;
struct node array[100];
int counter=0;


uint8_t equalZero(uint8_t* CardID1) {
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e00a      	b.n	8001912 <equalZero+0x24>
		if (CardID1[i] != 0) return 0;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <equalZero+0x1e>
 8001908:	2300      	movs	r3, #0
 800190a:	e006      	b.n	800191a <equalZero+0x2c>
	for (i = 0; i < 5; i++) {
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	3301      	adds	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d9f1      	bls.n	80018fc <equalZero+0xe>
	}
	return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <equalID>:
		if (CardID1[i] > CardID2[i]) return 1;
	}
	return 0;
}

uint8_t equalID(uint8_t* CardID1, uint8_t* CardID2) {
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e00e      	b.n	8001952 <equalID+0x2e>
		if (CardID1[i] != CardID2[i]) return 0;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	440b      	add	r3, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <equalID+0x28>
 8001948:	2300      	movs	r3, #0
 800194a:	e006      	b.n	800195a <equalID+0x36>
	for (i = 0; i < 5; i++) {
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d9ed      	bls.n	8001934 <equalID+0x10>
	}
	return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <duplicateID>:

void duplicateID(uint8_t* CardID1, uint8_t* CardID2){
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    	uint8_t i;
	for (i = 0; i < 5; i++) {
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e00a      	b.n	800198a <duplicateID+0x26>
		CardID1[i] = CardID2[i];
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	441a      	add	r2, r3
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	440b      	add	r3, r1
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++) {
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3301      	adds	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d9f1      	bls.n	8001974 <duplicateID+0x10>
	}
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <insert>:


void insert(uint8_t* key){
 800199c:	b490      	push	{r4, r7}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    if(counter>=100) return;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <insert+0x94>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b63      	cmp	r3, #99	; 0x63
 80019aa:	dc3c      	bgt.n	8001a26 <insert+0x8a>
    counter++;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <insert+0x94>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <insert+0x94>)
 80019b4:	6013      	str	r3, [r2, #0]
    for(int i=0;i<100;i++){
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e030      	b.n	8001a1e <insert+0x82>
        if(array[i].used_mem==0){
 80019bc:	491d      	ldr	r1, [pc, #116]	; (8001a34 <insert+0x98>)
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	440b      	add	r3, r1
 80019ca:	3305      	adds	r3, #5
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d122      	bne.n	8001a18 <insert+0x7c>
            array[i].used_mem=1;
 80019d2:	4918      	ldr	r1, [pc, #96]	; (8001a34 <insert+0x98>)
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	440b      	add	r3, r1
 80019e0:	3305      	adds	r3, #5
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
            for(uint8_t j=0;j<5;j++) array[i].ID[j] = key[j];
 80019e6:	2300      	movs	r3, #0
 80019e8:	72fb      	strb	r3, [r7, #11]
 80019ea:	e011      	b.n	8001a10 <insert+0x74>
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	7af9      	ldrb	r1, [r7, #11]
 80019f4:	781c      	ldrb	r4, [r3, #0]
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <insert+0x98>)
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4403      	add	r3, r0
 8001a04:	440b      	add	r3, r1
 8001a06:	4622      	mov	r2, r4
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	72fb      	strb	r3, [r7, #11]
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d9ea      	bls.n	80019ec <insert+0x50>
            return;
 8001a16:	e007      	b.n	8001a28 <insert+0x8c>
    for(int i=0;i<100;i++){
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b63      	cmp	r3, #99	; 0x63
 8001a22:	ddcb      	ble.n	80019bc <insert+0x20>
 8001a24:	e000      	b.n	8001a28 <insert+0x8c>
    if(counter>=100) return;
 8001a26:	bf00      	nop
        }
    }

}
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc90      	pop	{r4, r7}
 8001a2e:	4770      	bx	lr
 8001a30:	200003f0 	.word	0x200003f0
 8001a34:	20000198 	.word	0x20000198

08001a38 <delete_all>:


void delete_all(){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
    counter=0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <delete_all+0x40>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    for(int i=0;i<100;i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	e00c      	b.n	8001a64 <delete_all+0x2c>
        array[i].used_mem=0;
 8001a4a:	490c      	ldr	r1, [pc, #48]	; (8001a7c <delete_all+0x44>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b63      	cmp	r3, #99	; 0x63
 8001a68:	ddef      	ble.n	8001a4a <delete_all+0x12>
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200003f0 	.word	0x200003f0
 8001a7c:	20000198 	.word	0x20000198

08001a80 <search>:

uint8_t search(uint8_t* key){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    if(equalID(admin.ID,key)) return 1;//admin card
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4818      	ldr	r0, [pc, #96]	; (8001aec <search+0x6c>)
 8001a8c:	f7ff ff4a 	bl	8001924 <equalID>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <search+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e024      	b.n	8001ae4 <search+0x64>
    for(int i=0;i<100;i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e01d      	b.n	8001adc <search+0x5c>
        if((equalID(array[i].ID,key)) &&
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <search+0x70>)
 8001aac:	4413      	add	r3, r2
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff37 	bl	8001924 <equalID>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00c      	beq.n	8001ad6 <search+0x56>
          (array[i].used_mem==1)) return 1; //registered card
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <search+0x70>)
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	3305      	adds	r3, #5
 8001acc:	781b      	ldrb	r3, [r3, #0]
        if((equalID(array[i].ID,key)) &&
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <search+0x56>
          (array[i].used_mem==1)) return 1; //registered card
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e006      	b.n	8001ae4 <search+0x64>
    for(int i=0;i<100;i++){
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b63      	cmp	r3, #99	; 0x63
 8001ae0:	ddde      	ble.n	8001aa0 <search+0x20>
    }
    return 0; //not found card
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000190 	.word	0x20000190
 8001af0:	20000198 	.word	0x20000198

08001af4 <add_new_card>:

uint8_t add_new_card(uint8_t* key)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
       insert(key);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff4d 	bl	800199c <insert>
       return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <delete_card>:



uint8_t delete_card(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
        delete_all();
 8001b10:	f7ff ff92 	bl	8001a38 <delete_all>
        return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <set_admin>:


uint8_t set_admin(uint8_t *ID){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
        duplicateID(admin.ID, ID);
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <set_admin+0x1c>)
 8001b28:	f7ff ff1c 	bl	8001964 <duplicateID>
        return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000190 	.word	0x20000190

08001b3c <check_admin>:

uint8_t check_admin(uint8_t *ID){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	return equalID(ID, admin.ID);
 8001b44:	4904      	ldr	r1, [pc, #16]	; (8001b58 <check_admin+0x1c>)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff feec 	bl	8001924 <equalID>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000190 	.word	0x20000190

08001b5c <setTimer1>:
int timer6_counter=0;
int timer7_flag=0;
int timer7_counter=0;
int timer8_flag=0;
int timer8_counter=0;
void setTimer1(int duration) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <setTimer1+0x20>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <setTimer1+0x24>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200003f8 	.word	0x200003f8
 8001b80:	200003f4 	.word	0x200003f4

08001b84 <setTimer2>:
void setTimer2(int duration) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <setTimer2+0x20>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <setTimer2+0x24>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000400 	.word	0x20000400
 8001ba8:	200003fc 	.word	0x200003fc

08001bac <setTimer3>:
void setTimer3(int duration) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <setTimer3+0x20>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <setTimer3+0x24>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000408 	.word	0x20000408
 8001bd0:	20000404 	.word	0x20000404

08001bd4 <setTimer4>:
void setTimer4(int duration) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <setTimer4+0x20>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <setTimer4+0x24>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000410 	.word	0x20000410
 8001bf8:	2000040c 	.word	0x2000040c

08001bfc <setTimer5>:
void setTimer5(int duration) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <setTimer5+0x20>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <setTimer5+0x24>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000418 	.word	0x20000418
 8001c20:	20000414 	.word	0x20000414

08001c24 <setTimer6>:
void setTimer6(int duration) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <setTimer6+0x20>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <setTimer6+0x24>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000420 	.word	0x20000420
 8001c48:	2000041c 	.word	0x2000041c

08001c4c <setTimer7>:
void setTimer7(int duration) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	timer7_counter=duration;
 8001c54:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <setTimer7+0x20>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
	timer7_flag=0;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <setTimer7+0x24>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000428 	.word	0x20000428
 8001c70:	20000424 	.word	0x20000424

08001c74 <setTimer8>:
void setTimer8(int duration) {
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	timer8_counter=duration;
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <setTimer8+0x20>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
	timer8_flag=0;
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <setTimer8+0x24>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000430 	.word	0x20000430
 8001c98:	2000042c 	.word	0x2000042c

08001c9c <timeRun>:
void timeRun() {
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <timeRun+0x10c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dd0b      	ble.n	8001cc0 <timeRun+0x24>
		timer1_counter--;
 8001ca8:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <timeRun+0x10c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <timeRun+0x10c>)
 8001cb0:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <timeRun+0x10c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dc02      	bgt.n	8001cc0 <timeRun+0x24>
			timer1_flag=1;
 8001cba:	4b3c      	ldr	r3, [pc, #240]	; (8001dac <timeRun+0x110>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <timeRun+0x114>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dd0b      	ble.n	8001ce0 <timeRun+0x44>
		timer2_counter--;
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <timeRun+0x114>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <timeRun+0x114>)
 8001cd0:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <timeRun+0x114>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dc02      	bgt.n	8001ce0 <timeRun+0x44>
			timer2_flag=1;
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <timeRun+0x118>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <timeRun+0x11c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	dd0b      	ble.n	8001d00 <timeRun+0x64>
		timer3_counter--;
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <timeRun+0x11c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <timeRun+0x11c>)
 8001cf0:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <timeRun+0x11c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dc02      	bgt.n	8001d00 <timeRun+0x64>
			timer3_flag=1;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <timeRun+0x120>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <timeRun+0x124>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	dd0b      	ble.n	8001d20 <timeRun+0x84>
		timer4_counter--;
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <timeRun+0x124>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <timeRun+0x124>)
 8001d10:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <timeRun+0x124>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dc02      	bgt.n	8001d20 <timeRun+0x84>
			timer4_flag=1;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <timeRun+0x128>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <timeRun+0x12c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dd0b      	ble.n	8001d40 <timeRun+0xa4>
		timer5_counter--;
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <timeRun+0x12c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <timeRun+0x12c>)
 8001d30:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <timeRun+0x12c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dc02      	bgt.n	8001d40 <timeRun+0xa4>
			timer5_flag=1;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <timeRun+0x130>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter>0) {
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <timeRun+0x134>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	dd0b      	ble.n	8001d60 <timeRun+0xc4>
		timer6_counter--;
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <timeRun+0x134>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <timeRun+0x134>)
 8001d50:	6013      	str	r3, [r2, #0]
		if (timer6_counter<=0) {
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <timeRun+0x134>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dc02      	bgt.n	8001d60 <timeRun+0xc4>
			timer6_flag=1;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <timeRun+0x138>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter>0) {
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <timeRun+0x13c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	dd0b      	ble.n	8001d80 <timeRun+0xe4>
		timer7_counter--;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <timeRun+0x13c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <timeRun+0x13c>)
 8001d70:	6013      	str	r3, [r2, #0]
		if (timer7_counter<=0) {
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <timeRun+0x13c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	dc02      	bgt.n	8001d80 <timeRun+0xe4>
			timer7_flag=1;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <timeRun+0x140>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer8_counter>0) {
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <timeRun+0x144>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	dd0b      	ble.n	8001da0 <timeRun+0x104>
		timer8_counter--;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <timeRun+0x144>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <timeRun+0x144>)
 8001d90:	6013      	str	r3, [r2, #0]
		if (timer8_counter<=0) {
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <timeRun+0x144>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dc02      	bgt.n	8001da0 <timeRun+0x104>
			timer8_flag=1;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <timeRun+0x148>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	200003f8 	.word	0x200003f8
 8001dac:	200003f4 	.word	0x200003f4
 8001db0:	20000400 	.word	0x20000400
 8001db4:	200003fc 	.word	0x200003fc
 8001db8:	20000408 	.word	0x20000408
 8001dbc:	20000404 	.word	0x20000404
 8001dc0:	20000410 	.word	0x20000410
 8001dc4:	2000040c 	.word	0x2000040c
 8001dc8:	20000418 	.word	0x20000418
 8001dcc:	20000414 	.word	0x20000414
 8001dd0:	20000420 	.word	0x20000420
 8001dd4:	2000041c 	.word	0x2000041c
 8001dd8:	20000428 	.word	0x20000428
 8001ddc:	20000424 	.word	0x20000424
 8001de0:	20000430 	.word	0x20000430
 8001de4:	2000042c 	.word	0x2000042c

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_MspInit+0x5c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_MspInit+0x5c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_MspInit+0x5c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_MspInit+0x60>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_MspInit+0x60>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000

08001e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_SPI_MspInit+0x88>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d12f      	bne.n	8001ecc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_SPI_MspInit+0x8c>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e9c:	23a0      	movs	r3, #160	; 0xa0
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_SPI_MspInit+0x90>)
 8001eb0:	f000 fa08 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_SPI_MspInit+0x90>)
 8001ec8:	f000 f9fc 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010800 	.word	0x40010800

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d113      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_TIM_Base_MspInit+0x44>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_TIM_Base_MspInit+0x44>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_TIM_Base_MspInit+0x44>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	201c      	movs	r0, #28
 8001f10:	f000 f9a1 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f14:	201c      	movs	r0, #28
 8001f16:	f000 f9ba 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6e:	f000 f87f 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM2_IRQHandler+0x10>)
 8001f7e:	f001 faab 	bl	80034d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000148 	.word	0x20000148

08001f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fbe:	f7ff ffe5 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f001 fde7 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7ff fae7 	bl	8001598 <main>
  bx lr
 8001fca:	4770      	bx	lr
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fd4:	08004a28 	.word	0x08004a28
  ldr r2, =_sbss
 8001fd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fdc:	20000438 	.word	0x20000438

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x28>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f923 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fef2 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f93b 	bl	80022aa <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 f903 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000000 	.word	0x20000000
 8002068:	20000008 	.word	0x20000008
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x1c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x20>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x20>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000008 	.word	0x20000008
 8002090:	20000434 	.word	0x20000434

08002094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_GetTick+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000434 	.word	0x20000434

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <__NVIC_EnableIRQ+0x34>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f7ff ff90 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff2d 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff42 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff90 	bl	8002198 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5f 	bl	8002144 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff35 	bl	800210c <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e169      	b.n	80025ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d8:	2201      	movs	r2, #1
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8158 	bne.w	80025a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d05e      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002300:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d875      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002306:	4a98      	ldr	r2, [pc, #608]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d058      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 800230c:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d86f      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002312:	4a96      	ldr	r2, [pc, #600]	; (800256c <HAL_GPIO_Init+0x2a8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d052      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002318:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d869      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800231e:	4a94      	ldr	r2, [pc, #592]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d04c      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002324:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d863      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800232a:	4a92      	ldr	r2, [pc, #584]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d046      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002330:	4a90      	ldr	r2, [pc, #576]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d85d      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d82a      	bhi.n	8002390 <HAL_GPIO_Init+0xcc>
 800233a:	2b12      	cmp	r3, #18
 800233c:	d859      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_GPIO_Init+0x80>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	080023bf 	.word	0x080023bf
 8002348:	08002399 	.word	0x08002399
 800234c:	080023ab 	.word	0x080023ab
 8002350:	080023ed 	.word	0x080023ed
 8002354:	080023f3 	.word	0x080023f3
 8002358:	080023f3 	.word	0x080023f3
 800235c:	080023f3 	.word	0x080023f3
 8002360:	080023f3 	.word	0x080023f3
 8002364:	080023f3 	.word	0x080023f3
 8002368:	080023f3 	.word	0x080023f3
 800236c:	080023f3 	.word	0x080023f3
 8002370:	080023f3 	.word	0x080023f3
 8002374:	080023f3 	.word	0x080023f3
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023f3 	.word	0x080023f3
 8002380:	080023f3 	.word	0x080023f3
 8002384:	080023f3 	.word	0x080023f3
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023b5 	.word	0x080023b5
 8002390:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_GPIO_Init+0x2b4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002396:	e02c      	b.n	80023f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e029      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e024      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	3308      	adds	r3, #8
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e01f      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	330c      	adds	r3, #12
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e01a      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c6:	2304      	movs	r3, #4
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e013      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	611a      	str	r2, [r3, #16]
          break;
 80023de:	e009      	b.n	80023f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	615a      	str	r2, [r3, #20]
          break;
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          break;
 80023f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2bff      	cmp	r3, #255	; 0xff
 80023f8:	d801      	bhi.n	80023fe <HAL_GPIO_Init+0x13a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_Init+0x13e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2bff      	cmp	r3, #255	; 0xff
 8002408:	d802      	bhi.n	8002410 <HAL_GPIO_Init+0x14c>
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x152>
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3b08      	subs	r3, #8
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	210f      	movs	r1, #15
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80b1 	beq.w	80025a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x2b8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a40      	ldr	r2, [pc, #256]	; (8002584 <HAL_GPIO_Init+0x2c0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <HAL_GPIO_Init+0x2c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1e8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3e      	ldr	r2, [pc, #248]	; (800258c <HAL_GPIO_Init+0x2c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_GPIO_Init+0x2cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1e0>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024b0:	2300      	movs	r3, #0
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c2:	492f      	ldr	r1, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	492c      	ldr	r1, [pc, #176]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4928      	ldr	r1, [pc, #160]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	491e      	ldr	r1, [pc, #120]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4918      	ldr	r1, [pc, #96]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d021      	beq.n	8002598 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e021      	b.n	80025a6 <HAL_GPIO_Init+0x2e2>
 8002562:	bf00      	nop
 8002564:	10320000 	.word	0x10320000
 8002568:	10310000 	.word	0x10310000
 800256c:	10220000 	.word	0x10220000
 8002570:	10210000 	.word	0x10210000
 8002574:	10120000 	.word	0x10120000
 8002578:	10110000 	.word	0x10110000
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	40010800 	.word	0x40010800
 8002588:	40010c00 	.word	0x40010c00
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_GPIO_Init+0x304>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_GPIO_Init+0x304>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f47f ae8e 	bne.w	80022d8 <HAL_GPIO_Init+0x14>
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	372c      	adds	r7, #44	; 0x2c
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]
 8002606:	4613      	mov	r3, r2
 8002608:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800260a:	787b      	ldrb	r3, [r7, #1]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002616:	e003      	b.n	8002620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	041a      	lsls	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e272      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8087 	beq.w	800275a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b04      	cmp	r3, #4
 8002656:	d00c      	beq.n	8002672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002658:	4b8f      	ldr	r3, [pc, #572]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d112      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
 8002664:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d06c      	beq.n	8002758 <HAL_RCC_OscConfig+0x12c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d168      	bne.n	8002758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e24c      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x76>
 8002694:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e02e      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7a      	ldr	r2, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b78      	ldr	r3, [pc, #480]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a77      	ldr	r2, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0xbc>
 80026ce:	4b72      	ldr	r3, [pc, #456]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a71      	ldr	r2, [pc, #452]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026e8:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fcc4 	bl	8002094 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff fcc0 	bl	8002094 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e200      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xe4>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff fcb0 	bl	8002094 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff fcac 	bl	8002094 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1ec      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x10c>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002766:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x18c>
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x176>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1c0      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4939      	ldr	r1, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b36      	ldr	r3, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x270>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fc65 	bl	8002094 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff fc61 	bl	8002094 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1a1      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4927      	ldr	r1, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCC_OscConfig+0x270>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff fc44 	bl	8002094 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7ff fc40 	bl	8002094 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e180      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d03a      	beq.n	80028b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d019      	beq.n	8002876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_RCC_OscConfig+0x274>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7ff fc24 	bl	8002094 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7ff fc20 	bl	8002094 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e160      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800286e:	2001      	movs	r0, #1
 8002870:	f000 faa6 	bl	8002dc0 <RCC_Delay>
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_RCC_OscConfig+0x274>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7ff fc0a 	bl	8002094 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002882:	e00f      	b.n	80028a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff fc06 	bl	8002094 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d908      	bls.n	80028a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e146      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	42420000 	.word	0x42420000
 80028a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e9      	bne.n	8002884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a6 	beq.w	8002a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4a87      	ldr	r2, [pc, #540]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	61d3      	str	r3, [r2, #28]
 80028da:	4b85      	ldr	r3, [pc, #532]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b82      	ldr	r3, [pc, #520]	; (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7e      	ldr	r2, [pc, #504]	; (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002902:	f7ff fbc7 	bl	8002094 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290a:	f7ff fbc3 	bl	8002094 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	; 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e103      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x312>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e02d      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x334>
 8002946:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6213      	str	r3, [r2, #32]
 8002952:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	e01c      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x356>
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a5d      	ldr	r2, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7ff fb77 	bl	8002094 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7ff fb73 	bl	8002094 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0b1      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x37e>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7ff fb61 	bl	8002094 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7ff fb5d 	bl	8002094 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e09b      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4a3b      	ldr	r2, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8087 	beq.w	8002b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d061      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d146      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fb31 	bl	8002094 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff fb2d 	bl	8002094 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e06d      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4921      	ldr	r1, [pc, #132]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a19      	ldr	r1, [r3, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	430b      	orrs	r3, r1
 8002a82:	491b      	ldr	r1, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fb01 	bl	8002094 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff fafd 	bl	8002094 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e03d      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x46a>
 8002ab4:	e035      	b.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff faea 	bl	8002094 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7ff fae6 	bl	8002094 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e026      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x498>
 8002ae2:	e01e      	b.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e019      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d0      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d910      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 0207 	bic.w	r2, r3, #7
 8002b5a:	4965      	ldr	r1, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d040      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d115      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e073      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4936      	ldr	r1, [pc, #216]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7ff fa38 	bl	8002094 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7ff fa34 	bl	8002094 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e053      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d210      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1cc>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1d0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f996 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080049e0 	.word	0x080049e0
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b490      	push	{r4, r7}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d0a:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d0c:	1d3c      	adds	r4, r7, #4
 8002d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d14:	f240 2301 	movw	r3, #513	; 0x201
 8002d18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x46>
 8002d42:	e02b      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d46:	623b      	str	r3, [r7, #32]
      break;
 8002d48:	e02b      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3328      	adds	r3, #40	; 0x28
 8002d54:	443b      	add	r3, r7
 8002d56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0c5b      	lsrs	r3, r3, #17
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	3328      	adds	r3, #40	; 0x28
 8002d72:	443b      	add	r3, r7
 8002d74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d7e:	fb03 f202 	mul.w	r2, r3, r2
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	623b      	str	r3, [r7, #32]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d9e:	623b      	str	r3, [r7, #32]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc90      	pop	{r4, r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	080049d0 	.word	0x080049d0
 8002db4:	40021000 	.word	0x40021000
 8002db8:	007a1200 	.word	0x007a1200
 8002dbc:	003d0900 	.word	0x003d0900

08002dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <RCC_Delay+0x34>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <RCC_Delay+0x38>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0a5b      	lsrs	r3, r3, #9
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ddc:	bf00      	nop
  }
  while (Delay --);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	60fa      	str	r2, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f9      	bne.n	8002ddc <RCC_Delay+0x1c>
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	20000000 	.word	0x20000000
 8002df8:	10624dd3 	.word	0x10624dd3

08002dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e076      	b.n	8002efc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d108      	bne.n	8002e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1e:	d009      	beq.n	8002e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
 8002e26:	e005      	b.n	8002e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fffc 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	ea42 0103 	orr.w	r1, r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	0c1a      	lsrs	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f002 0204 	and.w	r2, r2, #4
 8002eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f12:	2301      	movs	r3, #1
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x26>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e18a      	b.n	8003240 <HAL_SPI_TransmitReceive+0x33c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f32:	f7ff f8af 	bl	8002094 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d00f      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x70>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5a:	d107      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x68>
 8002f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d003      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f72:	e15b      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x82>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x82>
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f8c:	e14e      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d003      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	887a      	ldrh	r2, [r7, #2]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	887a      	ldrh	r2, [r7, #2]
 8002fca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d007      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d178      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_TransmitReceive+0x10a>
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d166      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003032:	e053      	b.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d11b      	bne.n	800307a <HAL_SPI_TransmitReceive+0x176>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_SPI_TransmitReceive+0x176>
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d113      	bne.n	800307a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	1c9a      	adds	r2, r3, #2
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d119      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x1b8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d014      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	b292      	uxth	r2, r2
 800309e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b8:	2301      	movs	r3, #1
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030bc:	f7fe ffea 	bl	8002094 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d807      	bhi.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030da:	e0a7      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a6      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x130>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1a1      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x130>
 80030f0:	e07c      	b.n	80031ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x1fc>
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d16b      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003126:	e057      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11c      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d114      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d119      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x2ae>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d014      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ae:	2301      	movs	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031b2:	f7fe ff6f 	bl	8002094 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031be:	429a      	cmp	r2, r3
 80031c0:	d803      	bhi.n	80031ca <HAL_SPI_TransmitReceive+0x2c6>
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d102      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x2cc>
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031d6:	e029      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a2      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x224>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d19d      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f8b1 	bl	8003358 <SPI_EndRxTxTransaction>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003208:	e010      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	e000      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800322a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800323c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003240:	4618      	mov	r0, r3
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003258:	f7fe ff1c 	bl	8002094 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003268:	f7fe ff14 	bl	8002094 <HAL_GetTick>
 800326c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	0d1b      	lsrs	r3, r3, #20
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	e054      	b.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d050      	beq.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003288:	f7fe ff04 	bl	8002094 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	d902      	bls.n	800329e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d13d      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d111      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d004      	beq.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d107      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d10f      	bne.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e017      	b.n	800334a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d19b      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000

08003358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ff6a 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e000      	b.n	800338c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e041      	b.n	800342a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fd90 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 fa70 	bl	80038b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e03a      	b.n	80034c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIM_Base_Start_IT+0x98>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x58>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d009      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x58>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x58>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d010      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	e007      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800

080034d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9b1 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9a4 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9b3 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0204 	mvn.w	r2, #4
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f987 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f97a 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f989 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b08      	cmp	r3, #8
 8003594:	d122      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d11b      	bne.n	80035dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0208 	mvn.w	r2, #8
 80035ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2204      	movs	r2, #4
 80035b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f95d 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f950 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f95f 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2208      	movs	r2, #8
 8003606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f933 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f926 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f935 	bl	8003894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0201 	mvn.w	r2, #1
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe f938 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa77 	bl	8003b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8f9 	bl	80038a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0220 	mvn.w	r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa42 	bl	8003b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0b3      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x180>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xd0>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f000 8085 	beq.w	8003854 <HAL_TIM_ConfigClockSource+0x16c>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xa2>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x116>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xf6>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x136>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x156>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x156>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x156>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 f966 	bl	8003a6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04e      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 f94f 	bl	8003a6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03b      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f8c6 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f91d 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02b      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f8e4 	bl	80039d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f90d 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800381c:	e01b      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 f8a6 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f8fd 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 800383c:	e00b      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 f8f4 	bl	8003a36 <TIM_ITRx_SetConfig>
        break;
 800384e:	e002      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <TIM_Base_SetConfig+0xb8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0x30>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x30>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a26      	ldr	r2, [pc, #152]	; (8003974 <TIM_Base_SetConfig+0xbc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x30>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a25      	ldr	r2, [pc, #148]	; (8003978 <TIM_Base_SetConfig+0xc0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <TIM_Base_SetConfig+0xb8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a19      	ldr	r2, [pc, #100]	; (8003974 <TIM_Base_SetConfig+0xbc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <TIM_Base_SetConfig+0xc0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <TIM_Base_SetConfig+0xb8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0210 	bic.w	r2, r3, #16
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e046      	b.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a16      	ldr	r2, [pc, #88]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10c      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800

08003b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	; (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	2600      	movs	r6, #0
 8003b98:	4d0c      	ldr	r5, [pc, #48]	; (8003bcc <__libc_init_array+0x38>)
 8003b9a:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	f000 ff06 	bl	80049b4 <_init>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	4d0a      	ldr	r5, [pc, #40]	; (8003bd4 <__libc_init_array+0x40>)
 8003bac:	4c0a      	ldr	r4, [pc, #40]	; (8003bd8 <__libc_init_array+0x44>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	08004a20 	.word	0x08004a20
 8003bd0:	08004a20 	.word	0x08004a20
 8003bd4:	08004a20 	.word	0x08004a20
 8003bd8:	08004a24 	.word	0x08004a24

08003bdc <memset>:
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4402      	add	r2, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <pow>:
 8003bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	4689      	mov	r9, r1
 8003bf8:	f000 f862 	bl	8003cc0 <__ieee754_pow>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	4606      	mov	r6, r0
 8003c00:	460f      	mov	r7, r1
 8003c02:	462b      	mov	r3, r5
 8003c04:	4620      	mov	r0, r4
 8003c06:	4629      	mov	r1, r5
 8003c08:	f7fc fef8 	bl	80009fc <__aeabi_dcmpun>
 8003c0c:	bbc8      	cbnz	r0, 8003c82 <pow+0x96>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2300      	movs	r3, #0
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc febf 	bl	8000998 <__aeabi_dcmpeq>
 8003c1a:	b1b8      	cbz	r0, 8003c4c <pow+0x60>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc feb8 	bl	8000998 <__aeabi_dcmpeq>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d141      	bne.n	8003cb0 <pow+0xc4>
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	4629      	mov	r1, r5
 8003c30:	f000 fe3b 	bl	80048aa <finite>
 8003c34:	b328      	cbz	r0, 8003c82 <pow+0x96>
 8003c36:	2200      	movs	r2, #0
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f7fc feb5 	bl	80009ac <__aeabi_dcmplt>
 8003c42:	b1f0      	cbz	r0, 8003c82 <pow+0x96>
 8003c44:	f7ff ffa0 	bl	8003b88 <__errno>
 8003c48:	2322      	movs	r3, #34	; 0x22
 8003c4a:	e019      	b.n	8003c80 <pow+0x94>
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f000 fe2b 	bl	80048aa <finite>
 8003c54:	b9c8      	cbnz	r0, 8003c8a <pow+0x9e>
 8003c56:	4640      	mov	r0, r8
 8003c58:	4649      	mov	r1, r9
 8003c5a:	f000 fe26 	bl	80048aa <finite>
 8003c5e:	b1a0      	cbz	r0, 8003c8a <pow+0x9e>
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f000 fe21 	bl	80048aa <finite>
 8003c68:	b178      	cbz	r0, 8003c8a <pow+0x9e>
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	4630      	mov	r0, r6
 8003c70:	4639      	mov	r1, r7
 8003c72:	f7fc fec3 	bl	80009fc <__aeabi_dcmpun>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d0e4      	beq.n	8003c44 <pow+0x58>
 8003c7a:	f7ff ff85 	bl	8003b88 <__errno>
 8003c7e:	2321      	movs	r3, #33	; 0x21
 8003c80:	6003      	str	r3, [r0, #0]
 8003c82:	4630      	mov	r0, r6
 8003c84:	4639      	mov	r1, r7
 8003c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4630      	mov	r0, r6
 8003c90:	4639      	mov	r1, r7
 8003c92:	f7fc fe81 	bl	8000998 <__aeabi_dcmpeq>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d0f3      	beq.n	8003c82 <pow+0x96>
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	f000 fe04 	bl	80048aa <finite>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d0ed      	beq.n	8003c82 <pow+0x96>
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	4629      	mov	r1, r5
 8003caa:	f000 fdfe 	bl	80048aa <finite>
 8003cae:	e7c8      	b.n	8003c42 <pow+0x56>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4f01      	ldr	r7, [pc, #4]	; (8003cb8 <pow+0xcc>)
 8003cb4:	e7e5      	b.n	8003c82 <pow+0x96>
 8003cb6:	bf00      	nop
 8003cb8:	3ff00000 	.word	0x3ff00000
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <__ieee754_pow>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	b093      	sub	sp, #76	; 0x4c
 8003cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cca:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003cce:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	ea56 0102 	orrs.w	r1, r6, r2
 8003cd8:	4680      	mov	r8, r0
 8003cda:	d111      	bne.n	8003d00 <__ieee754_pow+0x40>
 8003cdc:	1803      	adds	r3, r0, r0
 8003cde:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003ce2:	4152      	adcs	r2, r2
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	4b82      	ldr	r3, [pc, #520]	; (8003ef0 <__ieee754_pow+0x230>)
 8003ce8:	4193      	sbcs	r3, r2
 8003cea:	f080 84b9 	bcs.w	8004660 <__ieee754_pow+0x9a0>
 8003cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	f7fc fa31 	bl	800015c <__adddf3>
 8003cfa:	4683      	mov	fp, r0
 8003cfc:	468c      	mov	ip, r1
 8003cfe:	e06f      	b.n	8003de0 <__ieee754_pow+0x120>
 8003d00:	4b7c      	ldr	r3, [pc, #496]	; (8003ef4 <__ieee754_pow+0x234>)
 8003d02:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003d06:	429c      	cmp	r4, r3
 8003d08:	464d      	mov	r5, r9
 8003d0a:	4682      	mov	sl, r0
 8003d0c:	dc06      	bgt.n	8003d1c <__ieee754_pow+0x5c>
 8003d0e:	d101      	bne.n	8003d14 <__ieee754_pow+0x54>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d1ec      	bne.n	8003cee <__ieee754_pow+0x2e>
 8003d14:	429e      	cmp	r6, r3
 8003d16:	dc01      	bgt.n	8003d1c <__ieee754_pow+0x5c>
 8003d18:	d10f      	bne.n	8003d3a <__ieee754_pow+0x7a>
 8003d1a:	b172      	cbz	r2, 8003d3a <__ieee754_pow+0x7a>
 8003d1c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003d20:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003d24:	ea55 050a 	orrs.w	r5, r5, sl
 8003d28:	d1e1      	bne.n	8003cee <__ieee754_pow+0x2e>
 8003d2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003d2e:	18db      	adds	r3, r3, r3
 8003d30:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003d34:	4152      	adcs	r2, r2
 8003d36:	429d      	cmp	r5, r3
 8003d38:	e7d5      	b.n	8003ce6 <__ieee754_pow+0x26>
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	da39      	bge.n	8003db2 <__ieee754_pow+0xf2>
 8003d3e:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <__ieee754_pow+0x238>)
 8003d40:	429e      	cmp	r6, r3
 8003d42:	dc52      	bgt.n	8003dea <__ieee754_pow+0x12a>
 8003d44:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003d48:	429e      	cmp	r6, r3
 8003d4a:	f340 849c 	ble.w	8004686 <__ieee754_pow+0x9c6>
 8003d4e:	1533      	asrs	r3, r6, #20
 8003d50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d54:	2b14      	cmp	r3, #20
 8003d56:	dd0f      	ble.n	8003d78 <__ieee754_pow+0xb8>
 8003d58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003d5c:	fa22 f103 	lsr.w	r1, r2, r3
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f040 848e 	bne.w	8004686 <__ieee754_pow+0x9c6>
 8003d6a:	f001 0101 	and.w	r1, r1, #1
 8003d6e:	f1c1 0302 	rsb	r3, r1, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	b182      	cbz	r2, 8003d98 <__ieee754_pow+0xd8>
 8003d76:	e05d      	b.n	8003e34 <__ieee754_pow+0x174>
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d159      	bne.n	8003e30 <__ieee754_pow+0x170>
 8003d7c:	f1c3 0314 	rsb	r3, r3, #20
 8003d80:	fa46 f103 	asr.w	r1, r6, r3
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	42b3      	cmp	r3, r6
 8003d8a:	f040 8479 	bne.w	8004680 <__ieee754_pow+0x9c0>
 8003d8e:	f001 0101 	and.w	r1, r1, #1
 8003d92:	f1c1 0302 	rsb	r3, r1, #2
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4b58      	ldr	r3, [pc, #352]	; (8003efc <__ieee754_pow+0x23c>)
 8003d9a:	429e      	cmp	r6, r3
 8003d9c:	d132      	bne.n	8003e04 <__ieee754_pow+0x144>
 8003d9e:	2f00      	cmp	r7, #0
 8003da0:	f280 846a 	bge.w	8004678 <__ieee754_pow+0x9b8>
 8003da4:	4642      	mov	r2, r8
 8003da6:	464b      	mov	r3, r9
 8003da8:	2000      	movs	r0, #0
 8003daa:	4954      	ldr	r1, [pc, #336]	; (8003efc <__ieee754_pow+0x23c>)
 8003dac:	f7fc fcb6 	bl	800071c <__aeabi_ddiv>
 8003db0:	e7a3      	b.n	8003cfa <__ieee754_pow+0x3a>
 8003db2:	2300      	movs	r3, #0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	d13c      	bne.n	8003e34 <__ieee754_pow+0x174>
 8003dba:	4b4e      	ldr	r3, [pc, #312]	; (8003ef4 <__ieee754_pow+0x234>)
 8003dbc:	429e      	cmp	r6, r3
 8003dbe:	d1eb      	bne.n	8003d98 <__ieee754_pow+0xd8>
 8003dc0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003dc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8003dcc:	f000 8448 	beq.w	8004660 <__ieee754_pow+0x9a0>
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <__ieee754_pow+0x240>)
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	dd0b      	ble.n	8003dee <__ieee754_pow+0x12e>
 8003dd6:	2f00      	cmp	r7, #0
 8003dd8:	f2c0 8448 	blt.w	800466c <__ieee754_pow+0x9ac>
 8003ddc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003de0:	4658      	mov	r0, fp
 8003de2:	4661      	mov	r1, ip
 8003de4:	b013      	add	sp, #76	; 0x4c
 8003de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dea:	2302      	movs	r3, #2
 8003dec:	e7e2      	b.n	8003db4 <__ieee754_pow+0xf4>
 8003dee:	2f00      	cmp	r7, #0
 8003df0:	f04f 0b00 	mov.w	fp, #0
 8003df4:	f04f 0c00 	mov.w	ip, #0
 8003df8:	daf2      	bge.n	8003de0 <__ieee754_pow+0x120>
 8003dfa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003dfe:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003e02:	e7ed      	b.n	8003de0 <__ieee754_pow+0x120>
 8003e04:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003e08:	d106      	bne.n	8003e18 <__ieee754_pow+0x158>
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	4640      	mov	r0, r8
 8003e10:	4649      	mov	r1, r9
 8003e12:	f7fc fb59 	bl	80004c8 <__aeabi_dmul>
 8003e16:	e770      	b.n	8003cfa <__ieee754_pow+0x3a>
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <__ieee754_pow+0x244>)
 8003e1a:	429f      	cmp	r7, r3
 8003e1c:	d10a      	bne.n	8003e34 <__ieee754_pow+0x174>
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	db08      	blt.n	8003e34 <__ieee754_pow+0x174>
 8003e22:	4640      	mov	r0, r8
 8003e24:	4649      	mov	r1, r9
 8003e26:	b013      	add	sp, #76	; 0x4c
 8003e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	f000 bc5e 	b.w	80046ec <__ieee754_sqrt>
 8003e30:	2300      	movs	r3, #0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4640      	mov	r0, r8
 8003e36:	4649      	mov	r1, r9
 8003e38:	f000 fd34 	bl	80048a4 <fabs>
 8003e3c:	4683      	mov	fp, r0
 8003e3e:	468c      	mov	ip, r1
 8003e40:	f1ba 0f00 	cmp.w	sl, #0
 8003e44:	d128      	bne.n	8003e98 <__ieee754_pow+0x1d8>
 8003e46:	b124      	cbz	r4, 8003e52 <__ieee754_pow+0x192>
 8003e48:	4b2c      	ldr	r3, [pc, #176]	; (8003efc <__ieee754_pow+0x23c>)
 8003e4a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d122      	bne.n	8003e98 <__ieee754_pow+0x1d8>
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	da07      	bge.n	8003e66 <__ieee754_pow+0x1a6>
 8003e56:	465a      	mov	r2, fp
 8003e58:	4663      	mov	r3, ip
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	4927      	ldr	r1, [pc, #156]	; (8003efc <__ieee754_pow+0x23c>)
 8003e5e:	f7fc fc5d 	bl	800071c <__aeabi_ddiv>
 8003e62:	4683      	mov	fp, r0
 8003e64:	468c      	mov	ip, r1
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	daba      	bge.n	8003de0 <__ieee754_pow+0x120>
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003e70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003e74:	4323      	orrs	r3, r4
 8003e76:	d108      	bne.n	8003e8a <__ieee754_pow+0x1ca>
 8003e78:	465a      	mov	r2, fp
 8003e7a:	4663      	mov	r3, ip
 8003e7c:	4658      	mov	r0, fp
 8003e7e:	4661      	mov	r1, ip
 8003e80:	f7fc f96a 	bl	8000158 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	e790      	b.n	8003dac <__ieee754_pow+0xec>
 8003e8a:	9b00      	ldr	r3, [sp, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d1a7      	bne.n	8003de0 <__ieee754_pow+0x120>
 8003e90:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003e94:	469c      	mov	ip, r3
 8003e96:	e7a3      	b.n	8003de0 <__ieee754_pow+0x120>
 8003e98:	0feb      	lsrs	r3, r5, #31
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8003e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ea0:	9b00      	ldr	r3, [sp, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d104      	bne.n	8003eb0 <__ieee754_pow+0x1f0>
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	e7e7      	b.n	8003e80 <__ieee754_pow+0x1c0>
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <__ieee754_pow+0x248>)
 8003eb2:	429e      	cmp	r6, r3
 8003eb4:	f340 80f6 	ble.w	80040a4 <__ieee754_pow+0x3e4>
 8003eb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003ebc:	429e      	cmp	r6, r3
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <__ieee754_pow+0x240>)
 8003ec0:	dd09      	ble.n	8003ed6 <__ieee754_pow+0x216>
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	dc0c      	bgt.n	8003ee0 <__ieee754_pow+0x220>
 8003ec6:	2f00      	cmp	r7, #0
 8003ec8:	da0c      	bge.n	8003ee4 <__ieee754_pow+0x224>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	b013      	add	sp, #76	; 0x4c
 8003ece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed2:	f000 bce2 	b.w	800489a <__math_oflow>
 8003ed6:	429c      	cmp	r4, r3
 8003ed8:	dbf5      	blt.n	8003ec6 <__ieee754_pow+0x206>
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <__ieee754_pow+0x23c>)
 8003edc:	429c      	cmp	r4, r3
 8003ede:	dd15      	ble.n	8003f0c <__ieee754_pow+0x24c>
 8003ee0:	2f00      	cmp	r7, #0
 8003ee2:	dcf2      	bgt.n	8003eca <__ieee754_pow+0x20a>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	b013      	add	sp, #76	; 0x4c
 8003ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	f000 bcd0 	b.w	8004890 <__math_uflow>
 8003ef0:	fff00000 	.word	0xfff00000
 8003ef4:	7ff00000 	.word	0x7ff00000
 8003ef8:	433fffff 	.word	0x433fffff
 8003efc:	3ff00000 	.word	0x3ff00000
 8003f00:	3fefffff 	.word	0x3fefffff
 8003f04:	3fe00000 	.word	0x3fe00000
 8003f08:	41e00000 	.word	0x41e00000
 8003f0c:	4661      	mov	r1, ip
 8003f0e:	2200      	movs	r2, #0
 8003f10:	4658      	mov	r0, fp
 8003f12:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <__ieee754_pow+0x3d0>)
 8003f14:	f7fc f920 	bl	8000158 <__aeabi_dsub>
 8003f18:	a355      	add	r3, pc, #340	; (adr r3, 8004070 <__ieee754_pow+0x3b0>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460d      	mov	r5, r1
 8003f22:	f7fc fad1 	bl	80004c8 <__aeabi_dmul>
 8003f26:	a354      	add	r3, pc, #336	; (adr r3, 8004078 <__ieee754_pow+0x3b8>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc fac8 	bl	80004c8 <__aeabi_dmul>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4682      	mov	sl, r0
 8003f3c:	468b      	mov	fp, r1
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	4b54      	ldr	r3, [pc, #336]	; (8004094 <__ieee754_pow+0x3d4>)
 8003f44:	f7fc fac0 	bl	80004c8 <__aeabi_dmul>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	a14c      	add	r1, pc, #304	; (adr r1, 8004080 <__ieee754_pow+0x3c0>)
 8003f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f52:	f7fc f901 	bl	8000158 <__aeabi_dsub>
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f7fc fab5 	bl	80004c8 <__aeabi_dmul>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	2000      	movs	r0, #0
 8003f64:	494c      	ldr	r1, [pc, #304]	; (8004098 <__ieee754_pow+0x3d8>)
 8003f66:	f7fc f8f7 	bl	8000158 <__aeabi_dsub>
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	4680      	mov	r8, r0
 8003f70:	4689      	mov	r9, r1
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7fc faa7 	bl	80004c8 <__aeabi_dmul>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc faa1 	bl	80004c8 <__aeabi_dmul>
 8003f86:	a340      	add	r3, pc, #256	; (adr r3, 8004088 <__ieee754_pow+0x3c8>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f7fc fa9c 	bl	80004c8 <__aeabi_dmul>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4650      	mov	r0, sl
 8003f96:	4659      	mov	r1, fp
 8003f98:	f7fc f8de 	bl	8000158 <__aeabi_dsub>
 8003f9c:	f04f 0a00 	mov.w	sl, #0
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	460d      	mov	r5, r1
 8003fa8:	4630      	mov	r0, r6
 8003faa:	4639      	mov	r1, r7
 8003fac:	f7fc f8d6 	bl	800015c <__adddf3>
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	468b      	mov	fp, r1
 8003fb8:	f7fc f8ce 	bl	8000158 <__aeabi_dsub>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc f8c8 	bl	8000158 <__aeabi_dsub>
 8003fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fcc:	9b00      	ldr	r3, [sp, #0]
 8003fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f04f 0600 	mov.w	r6, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	bf0c      	ite	eq
 8003fde:	4b2f      	ldreq	r3, [pc, #188]	; (800409c <__ieee754_pow+0x3dc>)
 8003fe0:	4b2b      	ldrne	r3, [pc, #172]	; (8004090 <__ieee754_pow+0x3d0>)
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fea:	e9cd 2300 	strd	r2, r3, [sp]
 8003fee:	4632      	mov	r2, r6
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	f7fc f8b1 	bl	8000158 <__aeabi_dsub>
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	465b      	mov	r3, fp
 8003ffa:	f7fc fa65 	bl	80004c8 <__aeabi_dmul>
 8003ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004002:	4680      	mov	r8, r0
 8004004:	4689      	mov	r9, r1
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc fa5d 	bl	80004c8 <__aeabi_dmul>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4640      	mov	r0, r8
 8004014:	4649      	mov	r1, r9
 8004016:	f7fc f8a1 	bl	800015c <__adddf3>
 800401a:	4632      	mov	r2, r6
 800401c:	463b      	mov	r3, r7
 800401e:	4680      	mov	r8, r0
 8004020:	4689      	mov	r9, r1
 8004022:	4650      	mov	r0, sl
 8004024:	4659      	mov	r1, fp
 8004026:	f7fc fa4f 	bl	80004c8 <__aeabi_dmul>
 800402a:	4604      	mov	r4, r0
 800402c:	460d      	mov	r5, r1
 800402e:	460b      	mov	r3, r1
 8004030:	4602      	mov	r2, r0
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800403a:	f7fc f88f 	bl	800015c <__adddf3>
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <__ieee754_pow+0x3e0>)
 8004040:	4682      	mov	sl, r0
 8004042:	4299      	cmp	r1, r3
 8004044:	460f      	mov	r7, r1
 8004046:	460e      	mov	r6, r1
 8004048:	f340 82e5 	ble.w	8004616 <__ieee754_pow+0x956>
 800404c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004050:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004054:	4303      	orrs	r3, r0
 8004056:	f000 81df 	beq.w	8004418 <__ieee754_pow+0x758>
 800405a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800405e:	2200      	movs	r2, #0
 8004060:	2300      	movs	r3, #0
 8004062:	f7fc fca3 	bl	80009ac <__aeabi_dcmplt>
 8004066:	3800      	subs	r0, #0
 8004068:	bf18      	it	ne
 800406a:	2001      	movne	r0, #1
 800406c:	e72e      	b.n	8003ecc <__ieee754_pow+0x20c>
 800406e:	bf00      	nop
 8004070:	60000000 	.word	0x60000000
 8004074:	3ff71547 	.word	0x3ff71547
 8004078:	f85ddf44 	.word	0xf85ddf44
 800407c:	3e54ae0b 	.word	0x3e54ae0b
 8004080:	55555555 	.word	0x55555555
 8004084:	3fd55555 	.word	0x3fd55555
 8004088:	652b82fe 	.word	0x652b82fe
 800408c:	3ff71547 	.word	0x3ff71547
 8004090:	3ff00000 	.word	0x3ff00000
 8004094:	3fd00000 	.word	0x3fd00000
 8004098:	3fe00000 	.word	0x3fe00000
 800409c:	bff00000 	.word	0xbff00000
 80040a0:	408fffff 	.word	0x408fffff
 80040a4:	4bd2      	ldr	r3, [pc, #840]	; (80043f0 <__ieee754_pow+0x730>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	402b      	ands	r3, r5
 80040aa:	b943      	cbnz	r3, 80040be <__ieee754_pow+0x3fe>
 80040ac:	4658      	mov	r0, fp
 80040ae:	4661      	mov	r1, ip
 80040b0:	4bd0      	ldr	r3, [pc, #832]	; (80043f4 <__ieee754_pow+0x734>)
 80040b2:	f7fc fa09 	bl	80004c8 <__aeabi_dmul>
 80040b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80040ba:	4683      	mov	fp, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	1523      	asrs	r3, r4, #20
 80040c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80040c4:	4413      	add	r3, r2
 80040c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c8:	4bcb      	ldr	r3, [pc, #812]	; (80043f8 <__ieee754_pow+0x738>)
 80040ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80040ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80040d2:	429c      	cmp	r4, r3
 80040d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80040d8:	dd08      	ble.n	80040ec <__ieee754_pow+0x42c>
 80040da:	4bc8      	ldr	r3, [pc, #800]	; (80043fc <__ieee754_pow+0x73c>)
 80040dc:	429c      	cmp	r4, r3
 80040de:	f340 8199 	ble.w	8004414 <__ieee754_pow+0x754>
 80040e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040e4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80040e8:	3301      	adds	r3, #1
 80040ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ec:	2600      	movs	r6, #0
 80040ee:	00f3      	lsls	r3, r6, #3
 80040f0:	930d      	str	r3, [sp, #52]	; 0x34
 80040f2:	4bc3      	ldr	r3, [pc, #780]	; (8004400 <__ieee754_pow+0x740>)
 80040f4:	4658      	mov	r0, fp
 80040f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80040fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040fe:	4629      	mov	r1, r5
 8004100:	461a      	mov	r2, r3
 8004102:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004106:	4623      	mov	r3, r4
 8004108:	f7fc f826 	bl	8000158 <__aeabi_dsub>
 800410c:	46da      	mov	sl, fp
 800410e:	462b      	mov	r3, r5
 8004110:	4652      	mov	r2, sl
 8004112:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800411a:	f7fc f81f 	bl	800015c <__adddf3>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	2000      	movs	r0, #0
 8004124:	49b7      	ldr	r1, [pc, #732]	; (8004404 <__ieee754_pow+0x744>)
 8004126:	f7fc faf9 	bl	800071c <__aeabi_ddiv>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004132:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004136:	f7fc f9c7 	bl	80004c8 <__aeabi_dmul>
 800413a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800413e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004142:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004146:	2300      	movs	r3, #0
 8004148:	2200      	movs	r2, #0
 800414a:	46ab      	mov	fp, r5
 800414c:	106d      	asrs	r5, r5, #1
 800414e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004158:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800415c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004160:	4640      	mov	r0, r8
 8004162:	4649      	mov	r1, r9
 8004164:	4614      	mov	r4, r2
 8004166:	461d      	mov	r5, r3
 8004168:	f7fc f9ae 	bl	80004c8 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004174:	f7fb fff0 	bl	8000158 <__aeabi_dsub>
 8004178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800417c:	4606      	mov	r6, r0
 800417e:	460f      	mov	r7, r1
 8004180:	4620      	mov	r0, r4
 8004182:	4629      	mov	r1, r5
 8004184:	f7fb ffe8 	bl	8000158 <__aeabi_dsub>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4650      	mov	r0, sl
 800418e:	4659      	mov	r1, fp
 8004190:	f7fb ffe2 	bl	8000158 <__aeabi_dsub>
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f7fc f996 	bl	80004c8 <__aeabi_dmul>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4630      	mov	r0, r6
 80041a2:	4639      	mov	r1, r7
 80041a4:	f7fb ffd8 	bl	8000158 <__aeabi_dsub>
 80041a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041ac:	f7fc f98c 	bl	80004c8 <__aeabi_dmul>
 80041b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7fc f984 	bl	80004c8 <__aeabi_dmul>
 80041c0:	a379      	add	r3, pc, #484	; (adr r3, 80043a8 <__ieee754_pow+0x6e8>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	4604      	mov	r4, r0
 80041c8:	460d      	mov	r5, r1
 80041ca:	f7fc f97d 	bl	80004c8 <__aeabi_dmul>
 80041ce:	a378      	add	r3, pc, #480	; (adr r3, 80043b0 <__ieee754_pow+0x6f0>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f7fb ffc2 	bl	800015c <__adddf3>
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	f7fc f974 	bl	80004c8 <__aeabi_dmul>
 80041e0:	a375      	add	r3, pc, #468	; (adr r3, 80043b8 <__ieee754_pow+0x6f8>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fb ffb9 	bl	800015c <__adddf3>
 80041ea:	4622      	mov	r2, r4
 80041ec:	462b      	mov	r3, r5
 80041ee:	f7fc f96b 	bl	80004c8 <__aeabi_dmul>
 80041f2:	a373      	add	r3, pc, #460	; (adr r3, 80043c0 <__ieee754_pow+0x700>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fb ffb0 	bl	800015c <__adddf3>
 80041fc:	4622      	mov	r2, r4
 80041fe:	462b      	mov	r3, r5
 8004200:	f7fc f962 	bl	80004c8 <__aeabi_dmul>
 8004204:	a370      	add	r3, pc, #448	; (adr r3, 80043c8 <__ieee754_pow+0x708>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fb ffa7 	bl	800015c <__adddf3>
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	f7fc f959 	bl	80004c8 <__aeabi_dmul>
 8004216:	a36e      	add	r3, pc, #440	; (adr r3, 80043d0 <__ieee754_pow+0x710>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fb ff9e 	bl	800015c <__adddf3>
 8004220:	4622      	mov	r2, r4
 8004222:	4606      	mov	r6, r0
 8004224:	460f      	mov	r7, r1
 8004226:	462b      	mov	r3, r5
 8004228:	4620      	mov	r0, r4
 800422a:	4629      	mov	r1, r5
 800422c:	f7fc f94c 	bl	80004c8 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	f7fc f946 	bl	80004c8 <__aeabi_dmul>
 800423c:	4604      	mov	r4, r0
 800423e:	460d      	mov	r5, r1
 8004240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004244:	4642      	mov	r2, r8
 8004246:	464b      	mov	r3, r9
 8004248:	f7fb ff88 	bl	800015c <__adddf3>
 800424c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004250:	f7fc f93a 	bl	80004c8 <__aeabi_dmul>
 8004254:	4622      	mov	r2, r4
 8004256:	462b      	mov	r3, r5
 8004258:	f7fb ff80 	bl	800015c <__adddf3>
 800425c:	4642      	mov	r2, r8
 800425e:	4606      	mov	r6, r0
 8004260:	460f      	mov	r7, r1
 8004262:	464b      	mov	r3, r9
 8004264:	4640      	mov	r0, r8
 8004266:	4649      	mov	r1, r9
 8004268:	f7fc f92e 	bl	80004c8 <__aeabi_dmul>
 800426c:	2200      	movs	r2, #0
 800426e:	4b66      	ldr	r3, [pc, #408]	; (8004408 <__ieee754_pow+0x748>)
 8004270:	4682      	mov	sl, r0
 8004272:	468b      	mov	fp, r1
 8004274:	f7fb ff72 	bl	800015c <__adddf3>
 8004278:	4632      	mov	r2, r6
 800427a:	463b      	mov	r3, r7
 800427c:	f7fb ff6e 	bl	800015c <__adddf3>
 8004280:	2400      	movs	r4, #0
 8004282:	460d      	mov	r5, r1
 8004284:	4622      	mov	r2, r4
 8004286:	460b      	mov	r3, r1
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	f7fc f91c 	bl	80004c8 <__aeabi_dmul>
 8004290:	2200      	movs	r2, #0
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <__ieee754_pow+0x748>)
 800429c:	f7fb ff5c 	bl	8000158 <__aeabi_dsub>
 80042a0:	4652      	mov	r2, sl
 80042a2:	465b      	mov	r3, fp
 80042a4:	f7fb ff58 	bl	8000158 <__aeabi_dsub>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fb ff52 	bl	8000158 <__aeabi_dsub>
 80042b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042b8:	f7fc f906 	bl	80004c8 <__aeabi_dmul>
 80042bc:	4622      	mov	r2, r4
 80042be:	4606      	mov	r6, r0
 80042c0:	460f      	mov	r7, r1
 80042c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042c6:	462b      	mov	r3, r5
 80042c8:	f7fc f8fe 	bl	80004c8 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fb ff42 	bl	800015c <__adddf3>
 80042d8:	2400      	movs	r4, #0
 80042da:	4606      	mov	r6, r0
 80042dc:	460f      	mov	r7, r1
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4640      	mov	r0, r8
 80042e4:	4649      	mov	r1, r9
 80042e6:	f7fb ff39 	bl	800015c <__adddf3>
 80042ea:	a33b      	add	r3, pc, #236	; (adr r3, 80043d8 <__ieee754_pow+0x718>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	4620      	mov	r0, r4
 80042f2:	460d      	mov	r5, r1
 80042f4:	f7fc f8e8 	bl	80004c8 <__aeabi_dmul>
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fb ff28 	bl	8000158 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f7fb ff22 	bl	8000158 <__aeabi_dsub>
 8004314:	a332      	add	r3, pc, #200	; (adr r3, 80043e0 <__ieee754_pow+0x720>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fc f8d5 	bl	80004c8 <__aeabi_dmul>
 800431e:	a332      	add	r3, pc, #200	; (adr r3, 80043e8 <__ieee754_pow+0x728>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fc f8cc 	bl	80004c8 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4630      	mov	r0, r6
 8004336:	4639      	mov	r1, r7
 8004338:	f7fb ff10 	bl	800015c <__adddf3>
 800433c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800433e:	4b33      	ldr	r3, [pc, #204]	; (800440c <__ieee754_pow+0x74c>)
 8004340:	f04f 0a00 	mov.w	sl, #0
 8004344:	4413      	add	r3, r2
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fb ff07 	bl	800015c <__adddf3>
 800434e:	4680      	mov	r8, r0
 8004350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004352:	4689      	mov	r9, r1
 8004354:	f7fc f84e 	bl	80003f4 <__aeabi_i2d>
 8004358:	4604      	mov	r4, r0
 800435a:	460d      	mov	r5, r1
 800435c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <__ieee754_pow+0x750>)
 8004360:	4413      	add	r3, r2
 8004362:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004366:	4642      	mov	r2, r8
 8004368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800436c:	464b      	mov	r3, r9
 800436e:	f7fb fef5 	bl	800015c <__adddf3>
 8004372:	4632      	mov	r2, r6
 8004374:	463b      	mov	r3, r7
 8004376:	f7fb fef1 	bl	800015c <__adddf3>
 800437a:	4622      	mov	r2, r4
 800437c:	462b      	mov	r3, r5
 800437e:	f7fb feed 	bl	800015c <__adddf3>
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	4650      	mov	r0, sl
 8004388:	468b      	mov	fp, r1
 800438a:	f7fb fee5 	bl	8000158 <__aeabi_dsub>
 800438e:	4632      	mov	r2, r6
 8004390:	463b      	mov	r3, r7
 8004392:	f7fb fee1 	bl	8000158 <__aeabi_dsub>
 8004396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800439a:	f7fb fedd 	bl	8000158 <__aeabi_dsub>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	e60d      	b.n	8003fc4 <__ieee754_pow+0x304>
 80043a8:	4a454eef 	.word	0x4a454eef
 80043ac:	3fca7e28 	.word	0x3fca7e28
 80043b0:	93c9db65 	.word	0x93c9db65
 80043b4:	3fcd864a 	.word	0x3fcd864a
 80043b8:	a91d4101 	.word	0xa91d4101
 80043bc:	3fd17460 	.word	0x3fd17460
 80043c0:	518f264d 	.word	0x518f264d
 80043c4:	3fd55555 	.word	0x3fd55555
 80043c8:	db6fabff 	.word	0xdb6fabff
 80043cc:	3fdb6db6 	.word	0x3fdb6db6
 80043d0:	33333303 	.word	0x33333303
 80043d4:	3fe33333 	.word	0x3fe33333
 80043d8:	e0000000 	.word	0xe0000000
 80043dc:	3feec709 	.word	0x3feec709
 80043e0:	dc3a03fd 	.word	0xdc3a03fd
 80043e4:	3feec709 	.word	0x3feec709
 80043e8:	145b01f5 	.word	0x145b01f5
 80043ec:	be3e2fe0 	.word	0xbe3e2fe0
 80043f0:	7ff00000 	.word	0x7ff00000
 80043f4:	43400000 	.word	0x43400000
 80043f8:	0003988e 	.word	0x0003988e
 80043fc:	000bb679 	.word	0x000bb679
 8004400:	080049f0 	.word	0x080049f0
 8004404:	3ff00000 	.word	0x3ff00000
 8004408:	40080000 	.word	0x40080000
 800440c:	08004a10 	.word	0x08004a10
 8004410:	08004a00 	.word	0x08004a00
 8004414:	2601      	movs	r6, #1
 8004416:	e66a      	b.n	80040ee <__ieee754_pow+0x42e>
 8004418:	a39d      	add	r3, pc, #628	; (adr r3, 8004690 <__ieee754_pow+0x9d0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	4640      	mov	r0, r8
 8004420:	4649      	mov	r1, r9
 8004422:	f7fb fe9b 	bl	800015c <__adddf3>
 8004426:	4622      	mov	r2, r4
 8004428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800442c:	462b      	mov	r3, r5
 800442e:	4650      	mov	r0, sl
 8004430:	4639      	mov	r1, r7
 8004432:	f7fb fe91 	bl	8000158 <__aeabi_dsub>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443e:	f7fc fad3 	bl	80009e8 <__aeabi_dcmpgt>
 8004442:	2800      	cmp	r0, #0
 8004444:	f47f ae09 	bne.w	800405a <__ieee754_pow+0x39a>
 8004448:	4aa3      	ldr	r2, [pc, #652]	; (80046d8 <__ieee754_pow+0xa18>)
 800444a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800444e:	4293      	cmp	r3, r2
 8004450:	f340 8101 	ble.w	8004656 <__ieee754_pow+0x996>
 8004454:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004458:	2000      	movs	r0, #0
 800445a:	151b      	asrs	r3, r3, #20
 800445c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004460:	fa4a f303 	asr.w	r3, sl, r3
 8004464:	4433      	add	r3, r6
 8004466:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800446a:	4f9c      	ldr	r7, [pc, #624]	; (80046dc <__ieee754_pow+0xa1c>)
 800446c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004470:	4117      	asrs	r7, r2
 8004472:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004476:	ea23 0107 	bic.w	r1, r3, r7
 800447a:	f1c2 0214 	rsb	r2, r2, #20
 800447e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004482:	460b      	mov	r3, r1
 8004484:	fa4a fa02 	asr.w	sl, sl, r2
 8004488:	2e00      	cmp	r6, #0
 800448a:	4602      	mov	r2, r0
 800448c:	4629      	mov	r1, r5
 800448e:	4620      	mov	r0, r4
 8004490:	bfb8      	it	lt
 8004492:	f1ca 0a00 	rsblt	sl, sl, #0
 8004496:	f7fb fe5f 	bl	8000158 <__aeabi_dsub>
 800449a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800449e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a2:	2400      	movs	r4, #0
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	f7fb fe58 	bl	800015c <__adddf3>
 80044ac:	a37a      	add	r3, pc, #488	; (adr r3, 8004698 <__ieee754_pow+0x9d8>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4620      	mov	r0, r4
 80044b4:	460d      	mov	r5, r1
 80044b6:	f7fc f807 	bl	80004c8 <__aeabi_dmul>
 80044ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044be:	4606      	mov	r6, r0
 80044c0:	460f      	mov	r7, r1
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fb fe47 	bl	8000158 <__aeabi_dsub>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fb fe41 	bl	8000158 <__aeabi_dsub>
 80044d6:	a372      	add	r3, pc, #456	; (adr r3, 80046a0 <__ieee754_pow+0x9e0>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fff4 	bl	80004c8 <__aeabi_dmul>
 80044e0:	a371      	add	r3, pc, #452	; (adr r3, 80046a8 <__ieee754_pow+0x9e8>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	4680      	mov	r8, r0
 80044e8:	4689      	mov	r9, r1
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fb ffeb 	bl	80004c8 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fb fe2f 	bl	800015c <__adddf3>
 80044fe:	4604      	mov	r4, r0
 8004500:	460d      	mov	r5, r1
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4630      	mov	r0, r6
 8004508:	4639      	mov	r1, r7
 800450a:	f7fb fe27 	bl	800015c <__adddf3>
 800450e:	4632      	mov	r2, r6
 8004510:	463b      	mov	r3, r7
 8004512:	4680      	mov	r8, r0
 8004514:	4689      	mov	r9, r1
 8004516:	f7fb fe1f 	bl	8000158 <__aeabi_dsub>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fb fe19 	bl	8000158 <__aeabi_dsub>
 8004526:	4642      	mov	r2, r8
 8004528:	4606      	mov	r6, r0
 800452a:	460f      	mov	r7, r1
 800452c:	464b      	mov	r3, r9
 800452e:	4640      	mov	r0, r8
 8004530:	4649      	mov	r1, r9
 8004532:	f7fb ffc9 	bl	80004c8 <__aeabi_dmul>
 8004536:	a35e      	add	r3, pc, #376	; (adr r3, 80046b0 <__ieee754_pow+0x9f0>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	4604      	mov	r4, r0
 800453e:	460d      	mov	r5, r1
 8004540:	f7fb ffc2 	bl	80004c8 <__aeabi_dmul>
 8004544:	a35c      	add	r3, pc, #368	; (adr r3, 80046b8 <__ieee754_pow+0x9f8>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fe05 	bl	8000158 <__aeabi_dsub>
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f7fb ffb9 	bl	80004c8 <__aeabi_dmul>
 8004556:	a35a      	add	r3, pc, #360	; (adr r3, 80046c0 <__ieee754_pow+0xa00>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb fdfe 	bl	800015c <__adddf3>
 8004560:	4622      	mov	r2, r4
 8004562:	462b      	mov	r3, r5
 8004564:	f7fb ffb0 	bl	80004c8 <__aeabi_dmul>
 8004568:	a357      	add	r3, pc, #348	; (adr r3, 80046c8 <__ieee754_pow+0xa08>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb fdf3 	bl	8000158 <__aeabi_dsub>
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	f7fb ffa7 	bl	80004c8 <__aeabi_dmul>
 800457a:	a355      	add	r3, pc, #340	; (adr r3, 80046d0 <__ieee754_pow+0xa10>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f7fb fdec 	bl	800015c <__adddf3>
 8004584:	4622      	mov	r2, r4
 8004586:	462b      	mov	r3, r5
 8004588:	f7fb ff9e 	bl	80004c8 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4640      	mov	r0, r8
 8004592:	4649      	mov	r1, r9
 8004594:	f7fb fde0 	bl	8000158 <__aeabi_dsub>
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4640      	mov	r0, r8
 80045a2:	4649      	mov	r1, r9
 80045a4:	f7fb ff90 	bl	80004c8 <__aeabi_dmul>
 80045a8:	2200      	movs	r2, #0
 80045aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045b2:	4620      	mov	r0, r4
 80045b4:	4629      	mov	r1, r5
 80045b6:	f7fb fdcf 	bl	8000158 <__aeabi_dsub>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c2:	f7fc f8ab 	bl	800071c <__aeabi_ddiv>
 80045c6:	4632      	mov	r2, r6
 80045c8:	4604      	mov	r4, r0
 80045ca:	460d      	mov	r5, r1
 80045cc:	463b      	mov	r3, r7
 80045ce:	4640      	mov	r0, r8
 80045d0:	4649      	mov	r1, r9
 80045d2:	f7fb ff79 	bl	80004c8 <__aeabi_dmul>
 80045d6:	4632      	mov	r2, r6
 80045d8:	463b      	mov	r3, r7
 80045da:	f7fb fdbf 	bl	800015c <__adddf3>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fb fdb7 	bl	8000158 <__aeabi_dsub>
 80045ea:	4642      	mov	r2, r8
 80045ec:	464b      	mov	r3, r9
 80045ee:	f7fb fdb3 	bl	8000158 <__aeabi_dsub>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	2000      	movs	r0, #0
 80045f8:	4939      	ldr	r1, [pc, #228]	; (80046e0 <__ieee754_pow+0xa20>)
 80045fa:	f7fb fdad 	bl	8000158 <__aeabi_dsub>
 80045fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004602:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004606:	da29      	bge.n	800465c <__ieee754_pow+0x99c>
 8004608:	4652      	mov	r2, sl
 800460a:	f000 f955 	bl	80048b8 <scalbn>
 800460e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004612:	f7ff bbfe 	b.w	8003e12 <__ieee754_pow+0x152>
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <__ieee754_pow+0xa24>)
 8004618:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800461c:	429f      	cmp	r7, r3
 800461e:	f77f af13 	ble.w	8004448 <__ieee754_pow+0x788>
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <__ieee754_pow+0xa28>)
 8004624:	440b      	add	r3, r1
 8004626:	4303      	orrs	r3, r0
 8004628:	d009      	beq.n	800463e <__ieee754_pow+0x97e>
 800462a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800462e:	2200      	movs	r2, #0
 8004630:	2300      	movs	r3, #0
 8004632:	f7fc f9bb 	bl	80009ac <__aeabi_dcmplt>
 8004636:	3800      	subs	r0, #0
 8004638:	bf18      	it	ne
 800463a:	2001      	movne	r0, #1
 800463c:	e453      	b.n	8003ee6 <__ieee754_pow+0x226>
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	f7fb fd89 	bl	8000158 <__aeabi_dsub>
 8004646:	4642      	mov	r2, r8
 8004648:	464b      	mov	r3, r9
 800464a:	f7fc f9c3 	bl	80009d4 <__aeabi_dcmpge>
 800464e:	2800      	cmp	r0, #0
 8004650:	f43f aefa 	beq.w	8004448 <__ieee754_pow+0x788>
 8004654:	e7e9      	b.n	800462a <__ieee754_pow+0x96a>
 8004656:	f04f 0a00 	mov.w	sl, #0
 800465a:	e720      	b.n	800449e <__ieee754_pow+0x7de>
 800465c:	4621      	mov	r1, r4
 800465e:	e7d6      	b.n	800460e <__ieee754_pow+0x94e>
 8004660:	f04f 0b00 	mov.w	fp, #0
 8004664:	f8df c078 	ldr.w	ip, [pc, #120]	; 80046e0 <__ieee754_pow+0xa20>
 8004668:	f7ff bbba 	b.w	8003de0 <__ieee754_pow+0x120>
 800466c:	f04f 0b00 	mov.w	fp, #0
 8004670:	f04f 0c00 	mov.w	ip, #0
 8004674:	f7ff bbb4 	b.w	8003de0 <__ieee754_pow+0x120>
 8004678:	4640      	mov	r0, r8
 800467a:	4649      	mov	r1, r9
 800467c:	f7ff bb3d 	b.w	8003cfa <__ieee754_pow+0x3a>
 8004680:	9200      	str	r2, [sp, #0]
 8004682:	f7ff bb89 	b.w	8003d98 <__ieee754_pow+0xd8>
 8004686:	2300      	movs	r3, #0
 8004688:	f7ff bb73 	b.w	8003d72 <__ieee754_pow+0xb2>
 800468c:	f3af 8000 	nop.w
 8004690:	652b82fe 	.word	0x652b82fe
 8004694:	3c971547 	.word	0x3c971547
 8004698:	00000000 	.word	0x00000000
 800469c:	3fe62e43 	.word	0x3fe62e43
 80046a0:	fefa39ef 	.word	0xfefa39ef
 80046a4:	3fe62e42 	.word	0x3fe62e42
 80046a8:	0ca86c39 	.word	0x0ca86c39
 80046ac:	be205c61 	.word	0xbe205c61
 80046b0:	72bea4d0 	.word	0x72bea4d0
 80046b4:	3e663769 	.word	0x3e663769
 80046b8:	c5d26bf1 	.word	0xc5d26bf1
 80046bc:	3ebbbd41 	.word	0x3ebbbd41
 80046c0:	af25de2c 	.word	0xaf25de2c
 80046c4:	3f11566a 	.word	0x3f11566a
 80046c8:	16bebd93 	.word	0x16bebd93
 80046cc:	3f66c16c 	.word	0x3f66c16c
 80046d0:	5555553e 	.word	0x5555553e
 80046d4:	3fc55555 	.word	0x3fc55555
 80046d8:	3fe00000 	.word	0x3fe00000
 80046dc:	000fffff 	.word	0x000fffff
 80046e0:	3ff00000 	.word	0x3ff00000
 80046e4:	4090cbff 	.word	0x4090cbff
 80046e8:	3f6f3400 	.word	0x3f6f3400

080046ec <__ieee754_sqrt>:
 80046ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004848 <__ieee754_sqrt+0x15c>
 80046f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80046f8:	4606      	mov	r6, r0
 80046fa:	460d      	mov	r5, r1
 80046fc:	460c      	mov	r4, r1
 80046fe:	460a      	mov	r2, r1
 8004700:	4607      	mov	r7, r0
 8004702:	4603      	mov	r3, r0
 8004704:	d10f      	bne.n	8004726 <__ieee754_sqrt+0x3a>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	f7fb fedd 	bl	80004c8 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4630      	mov	r0, r6
 8004714:	4629      	mov	r1, r5
 8004716:	f7fb fd21 	bl	800015c <__adddf3>
 800471a:	4606      	mov	r6, r0
 800471c:	460d      	mov	r5, r1
 800471e:	4630      	mov	r0, r6
 8004720:	4629      	mov	r1, r5
 8004722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004726:	2900      	cmp	r1, #0
 8004728:	dc0e      	bgt.n	8004748 <__ieee754_sqrt+0x5c>
 800472a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800472e:	ea5c 0707 	orrs.w	r7, ip, r7
 8004732:	d0f4      	beq.n	800471e <__ieee754_sqrt+0x32>
 8004734:	b141      	cbz	r1, 8004748 <__ieee754_sqrt+0x5c>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	f7fb fd0d 	bl	8000158 <__aeabi_dsub>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	f7fb ffeb 	bl	800071c <__aeabi_ddiv>
 8004746:	e7e8      	b.n	800471a <__ieee754_sqrt+0x2e>
 8004748:	1521      	asrs	r1, r4, #20
 800474a:	d075      	beq.n	8004838 <__ieee754_sqrt+0x14c>
 800474c:	07cc      	lsls	r4, r1, #31
 800474e:	f04f 0400 	mov.w	r4, #0
 8004752:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004756:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800475a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800475e:	bf5e      	ittt	pl
 8004760:	0fd9      	lsrpl	r1, r3, #31
 8004762:	005b      	lslpl	r3, r3, #1
 8004764:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004768:	0fd9      	lsrs	r1, r3, #31
 800476a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800476e:	2516      	movs	r5, #22
 8004770:	4620      	mov	r0, r4
 8004772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004776:	107f      	asrs	r7, r7, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	1846      	adds	r6, r0, r1
 800477c:	4296      	cmp	r6, r2
 800477e:	bfde      	ittt	le
 8004780:	1b92      	suble	r2, r2, r6
 8004782:	1870      	addle	r0, r6, r1
 8004784:	1864      	addle	r4, r4, r1
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	3d01      	subs	r5, #1
 800478a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800478e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004796:	d1f0      	bne.n	800477a <__ieee754_sqrt+0x8e>
 8004798:	4629      	mov	r1, r5
 800479a:	f04f 0e20 	mov.w	lr, #32
 800479e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80047a2:	4282      	cmp	r2, r0
 80047a4:	eb06 0c05 	add.w	ip, r6, r5
 80047a8:	dc02      	bgt.n	80047b0 <__ieee754_sqrt+0xc4>
 80047aa:	d113      	bne.n	80047d4 <__ieee754_sqrt+0xe8>
 80047ac:	459c      	cmp	ip, r3
 80047ae:	d811      	bhi.n	80047d4 <__ieee754_sqrt+0xe8>
 80047b0:	f1bc 0f00 	cmp.w	ip, #0
 80047b4:	eb0c 0506 	add.w	r5, ip, r6
 80047b8:	da43      	bge.n	8004842 <__ieee754_sqrt+0x156>
 80047ba:	2d00      	cmp	r5, #0
 80047bc:	db41      	blt.n	8004842 <__ieee754_sqrt+0x156>
 80047be:	f100 0801 	add.w	r8, r0, #1
 80047c2:	1a12      	subs	r2, r2, r0
 80047c4:	4640      	mov	r0, r8
 80047c6:	459c      	cmp	ip, r3
 80047c8:	bf88      	it	hi
 80047ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80047ce:	eba3 030c 	sub.w	r3, r3, ip
 80047d2:	4431      	add	r1, r6
 80047d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80047d8:	f1be 0e01 	subs.w	lr, lr, #1
 80047dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80047e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80047e8:	d1db      	bne.n	80047a2 <__ieee754_sqrt+0xb6>
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d006      	beq.n	80047fc <__ieee754_sqrt+0x110>
 80047ee:	1c48      	adds	r0, r1, #1
 80047f0:	bf0b      	itete	eq
 80047f2:	4671      	moveq	r1, lr
 80047f4:	3101      	addne	r1, #1
 80047f6:	3401      	addeq	r4, #1
 80047f8:	f021 0101 	bicne.w	r1, r1, #1
 80047fc:	1063      	asrs	r3, r4, #1
 80047fe:	0849      	lsrs	r1, r1, #1
 8004800:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004804:	07e2      	lsls	r2, r4, #31
 8004806:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800480a:	bf48      	it	mi
 800480c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004810:	460e      	mov	r6, r1
 8004812:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004816:	e782      	b.n	800471e <__ieee754_sqrt+0x32>
 8004818:	0ada      	lsrs	r2, r3, #11
 800481a:	3815      	subs	r0, #21
 800481c:	055b      	lsls	r3, r3, #21
 800481e:	2a00      	cmp	r2, #0
 8004820:	d0fa      	beq.n	8004818 <__ieee754_sqrt+0x12c>
 8004822:	02d5      	lsls	r5, r2, #11
 8004824:	d50a      	bpl.n	800483c <__ieee754_sqrt+0x150>
 8004826:	f1c1 0420 	rsb	r4, r1, #32
 800482a:	fa23 f404 	lsr.w	r4, r3, r4
 800482e:	1e4d      	subs	r5, r1, #1
 8004830:	408b      	lsls	r3, r1
 8004832:	4322      	orrs	r2, r4
 8004834:	1b41      	subs	r1, r0, r5
 8004836:	e789      	b.n	800474c <__ieee754_sqrt+0x60>
 8004838:	4608      	mov	r0, r1
 800483a:	e7f0      	b.n	800481e <__ieee754_sqrt+0x132>
 800483c:	0052      	lsls	r2, r2, #1
 800483e:	3101      	adds	r1, #1
 8004840:	e7ef      	b.n	8004822 <__ieee754_sqrt+0x136>
 8004842:	4680      	mov	r8, r0
 8004844:	e7bd      	b.n	80047c2 <__ieee754_sqrt+0xd6>
 8004846:	bf00      	nop
 8004848:	7ff00000 	.word	0x7ff00000

0800484c <with_errno>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	4616      	mov	r6, r2
 8004854:	f7ff f998 	bl	8003b88 <__errno>
 8004858:	4629      	mov	r1, r5
 800485a:	6006      	str	r6, [r0, #0]
 800485c:	4620      	mov	r0, r4
 800485e:	bd70      	pop	{r4, r5, r6, pc}

08004860 <xflow>:
 8004860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004862:	4615      	mov	r5, r2
 8004864:	461c      	mov	r4, r3
 8004866:	b180      	cbz	r0, 800488a <xflow+0x2a>
 8004868:	4610      	mov	r0, r2
 800486a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800486e:	e9cd 0100 	strd	r0, r1, [sp]
 8004872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004876:	4628      	mov	r0, r5
 8004878:	4621      	mov	r1, r4
 800487a:	f7fb fe25 	bl	80004c8 <__aeabi_dmul>
 800487e:	2222      	movs	r2, #34	; 0x22
 8004880:	b003      	add	sp, #12
 8004882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004886:	f7ff bfe1 	b.w	800484c <with_errno>
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	e7ee      	b.n	800486e <xflow+0xe>

08004890 <__math_uflow>:
 8004890:	2200      	movs	r2, #0
 8004892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004896:	f7ff bfe3 	b.w	8004860 <xflow>

0800489a <__math_oflow>:
 800489a:	2200      	movs	r2, #0
 800489c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80048a0:	f7ff bfde 	b.w	8004860 <xflow>

080048a4 <fabs>:
 80048a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80048a8:	4770      	bx	lr

080048aa <finite>:
 80048aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80048ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80048b2:	0fc0      	lsrs	r0, r0, #31
 80048b4:	4770      	bx	lr
	...

080048b8 <scalbn>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80048be:	4604      	mov	r4, r0
 80048c0:	460d      	mov	r5, r1
 80048c2:	4617      	mov	r7, r2
 80048c4:	460b      	mov	r3, r1
 80048c6:	b996      	cbnz	r6, 80048ee <scalbn+0x36>
 80048c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048cc:	4303      	orrs	r3, r0
 80048ce:	d039      	beq.n	8004944 <scalbn+0x8c>
 80048d0:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <scalbn+0xe8>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	f7fb fdf8 	bl	80004c8 <__aeabi_dmul>
 80048d8:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <scalbn+0xec>)
 80048da:	4604      	mov	r4, r0
 80048dc:	429f      	cmp	r7, r3
 80048de:	460d      	mov	r5, r1
 80048e0:	da0f      	bge.n	8004902 <scalbn+0x4a>
 80048e2:	a32b      	add	r3, pc, #172	; (adr r3, 8004990 <scalbn+0xd8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fdee 	bl	80004c8 <__aeabi_dmul>
 80048ec:	e006      	b.n	80048fc <scalbn+0x44>
 80048ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80048f2:	4296      	cmp	r6, r2
 80048f4:	d10a      	bne.n	800490c <scalbn+0x54>
 80048f6:	4602      	mov	r2, r0
 80048f8:	f7fb fc30 	bl	800015c <__adddf3>
 80048fc:	4604      	mov	r4, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	e020      	b.n	8004944 <scalbn+0x8c>
 8004902:	460b      	mov	r3, r1
 8004904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004908:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800490c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004910:	19b9      	adds	r1, r7, r6
 8004912:	4291      	cmp	r1, r2
 8004914:	dd0e      	ble.n	8004934 <scalbn+0x7c>
 8004916:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800491a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800491e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004922:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004926:	4820      	ldr	r0, [pc, #128]	; (80049a8 <scalbn+0xf0>)
 8004928:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800492c:	a31a      	add	r3, pc, #104	; (adr r3, 8004998 <scalbn+0xe0>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	e7d9      	b.n	80048e8 <scalbn+0x30>
 8004934:	2900      	cmp	r1, #0
 8004936:	dd08      	ble.n	800494a <scalbn+0x92>
 8004938:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800493c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800494a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800494e:	da12      	bge.n	8004976 <scalbn+0xbe>
 8004950:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004954:	429f      	cmp	r7, r3
 8004956:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800495a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800495e:	dcdc      	bgt.n	800491a <scalbn+0x62>
 8004960:	a30b      	add	r3, pc, #44	; (adr r3, 8004990 <scalbn+0xd8>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800496a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800496e:	480f      	ldr	r0, [pc, #60]	; (80049ac <scalbn+0xf4>)
 8004970:	f041 011f 	orr.w	r1, r1, #31
 8004974:	e7b8      	b.n	80048e8 <scalbn+0x30>
 8004976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800497a:	3136      	adds	r1, #54	; 0x36
 800497c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004980:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	2200      	movs	r2, #0
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <scalbn+0xf8>)
 800498c:	e7ac      	b.n	80048e8 <scalbn+0x30>
 800498e:	bf00      	nop
 8004990:	c2f8f359 	.word	0xc2f8f359
 8004994:	01a56e1f 	.word	0x01a56e1f
 8004998:	8800759c 	.word	0x8800759c
 800499c:	7e37e43c 	.word	0x7e37e43c
 80049a0:	43500000 	.word	0x43500000
 80049a4:	ffff3cb0 	.word	0xffff3cb0
 80049a8:	8800759c 	.word	0x8800759c
 80049ac:	c2f8f359 	.word	0xc2f8f359
 80049b0:	3c900000 	.word	0x3c900000

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
